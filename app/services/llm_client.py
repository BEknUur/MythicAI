import openai
import base64
from pathlib import Path
from app.config import settings
from typing import Optional
import logging

# Инициализация OpenAI
openai.api_key = settings.OPENAI_API_KEY
client = openai.OpenAI(api_key=settings.OPENAI_API_KEY)

logger = logging.getLogger(__name__)

def generate_text(prompt: str,
                  model: str = "gpt-3.5-turbo",
                  max_tokens: int = 1500,
                  temperature: float = 0.8) -> str:
    """Генерирует текст с помощью OpenAI API"""
    try:
        # Радикально улучшенная системная инструкция
        system_message = """Ты — мастер живого повествования, создающий истории об Instagram-профилях.

СТРОГО ЗАПРЕЩЕНО:
- Фразы: "передает эмоции", "придает глубину", "снимок показывает"
- Повторы одинаковых конструкций
- Канцеляризмы и ИИ-штампы
- Сухая статистика без метафор

ОБЯЗАТЕЛЬНО:
- Правило 5 чувств: в каждом абзаце максимум 2 чувства (зрение+звук, запах+осязание)
- Живая речь: "тоска щиплет за нос" вместо "ностальгия"
- Диалоги-вставки перед ключевыми моментами
- Цифры в метафорах: "431 огонек на карте" вместо "431 подписчик"
- Эмоциональная дуга: любопытство → сомнения → поворот → принятие
- Рассказчик объясняет, зачем пишет книгу

СТРУКТУРА:
- Короткие абзацы (2-3 строки)
- Один конкретный фокус на главу
- Вариативность: расшифровка, диалог, внутренняя мысль
- Финал-приглашение, а не мораль

ЯЗЫК: только русский, никакого английского."""

        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": prompt}
            ],
            max_tokens=max_tokens,
            temperature=temperature,
            presence_penalty=0.9,  # Максимальное подавление повторений
            frequency_penalty=0.7   # Сильное поощрение разнообразия
        )
        
        return response.choices[0].message.content.strip()
        
    except Exception as e:
        logger.error(f"Ошибка в generate_text: {e}")
        return f"Ошибка генерации: {str(e)}"


def analyze_photo(image_path: Path, context: str = "", photo_index: int = 0) -> str:
    """Анализирует фотографию с вариативными подходами"""
    try:
        if not image_path.exists():
            return "Кадр потерялся в цифровой пустоте"
            
        # Читаем и кодируем изображение
        with open(image_path, "rb") as image_file:
            image_data = base64.b64encode(image_file.read()).decode('utf-8')
        
        # Вариативные подходы к анализу фото
        analysis_styles = [
            # Расшифровка деталей
            """Расшифруй этот кадр как детектив:

Что КОНКРЕТНО видишь (без "мягких оттенков"):
- Свет падает откуда? Какие тени?
- Что в руках/на лице/в позе?
- Один звук, который мог бы быть в кадре
- Один запах этого места

Добавь диалог-вставку (1-2 строки):
— Что он мог сказать перед съемкой?

Правило 5 чувств: максимум 2 чувства в описании.""",

            # Внутренний монолог
            """Войди в голову героя в момент съемки:

Что он думает? (внутренний монолог)
Что чувствует телом? (холод, тепло, усталость)
Один страх или надежда в этот момент?

Без штампов "передает эмоцию" - покажи живой мыслью:
"Сейчас нажму кнопку, и этот миг станет вечным..."

Максимум 100 слов.""",

            # Мини-диалог с окружением
            """Создай мини-сцену с диалогом:

Кто еще мог быть рядом?
Что они сказали друг другу?
Один конкретный предмет в кадре "говорит"

Формат:
— Реплика 1
— Ответ
[Описание одной детали через звук/запах/касание]

Живо и коротко."""
        ]
        
        # Выбираем стиль по индексу фото
        style_index = photo_index % len(analysis_styles)
        prompt = f"""{analysis_styles[style_index]}

Контекст: {context}

НЕ используй: "снимок передает", "эмоции ностальгии", "мягкие оттенки"
Используй: конкретику, живую речь, правило 5 чувств."""

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{image_data}",
                                "detail": "high"
                            }
                        }
                    ]
                }
            ],
            max_tokens=200,
            temperature=0.7
        )
        
        return response.choices[0].message.content.strip()
        
    except Exception as e:
        logger.error(f"Ошибка анализа фото {image_path}: {e}")
        return f"Кадр молчит. Но тишина тоже говорит."


def generate_unique_chapter(chapter_type: str, data: dict, previous_texts: list = None) -> str:
    """Генерирует уникальную главу с четким фокусом и живой речью"""
    
    if previous_texts is None:
        previous_texts = []
    
    # Строжайший запрет повторов
    forbidden_phrases = [
        "под веселыми постами скрывается",
        "снимок передает эмоции",
        "мягкие оттенки",
        "цвета придают глубину",
        "особый момент",
        "уникальная история",
        "цифровое пространство"
    ]
    
    anti_repeat_context = f"""
КАТЕГОРИЧЕСКИ ЗАПРЕЩЕНО повторять фразы: {', '.join(forbidden_phrases)}

Уже использовано (НЕ повторяй даже смысл): {chr(10).join(previous_texts[-2:]) if previous_texts else 'Пока чисто'}
"""
    
    # Фиксированные данные
    username = data.get('username', 'Неизвестный')
    followers = data.get('followers', 0)
    
    # Переводим цифры в метафоры
    followers_metaphor = f"{followers} огоньков на карте подсвечивает его путь" if followers > 100 else f"{followers} верных спутников идут за ним"
    
    prompts = {
        "intro": f"""ВСТРЕЧА. Я-рассказчик объясняет, зачем пишет эту книгу.

Начни с мотивации:
"Документирую, чтобы не забыть, как случайно встретил талант..."

Данные:
- @{username}
- {followers_metaphor} (НЕ пиши сухо "{followers} подписчиков")
- Био: {data.get('bio', 'Молчание')}

Эмоциональная дуга: ЛЮБОПЫТСТВО
Правило 5 чувств: зрение + одно другое чувство
Диалог-вставка: что подумал, увидев профиль впервые

150 слов. Живая речь.{anti_repeat_context}""",

        "emotions": f"""КОНФЛИКТ. Одна конкретная тайна (не общие рассуждения).

Фокус: противоречие между ОДНОЙ подписью и тем, что видно на фото.
Реальная подпись: "{data.get('captions', ['Все хорошо'])[0]}"

Покажи конкретно:
- Что написано
- Что видно в глазах/позе
- Один звук, который мог бы быть за кадром

Эмоциональная дуга: СОМНЕНИЯ
НЕ повторяй "под веселыми постами скрывается" - покажи примером!

Диалог-вставка:
— Что он мог сказать себе, публикуя этот пост?

180 слов.{anti_repeat_context}""",

        "places": f"""ПОВОРОТНЫЙ КАДР. Место, которое раскрыло тайну.

Место: {data.get('locations', ['Неизвестное место'])[0]}

Один конкретный кадр из этого места изменил все понимание героя.

Покажи:
- Что особенного в этом месте (запах, звук, текстура)
- Момент озарения рассказчика
- Диалог-вставка перед ключевым кадром

Эмоциональная дуга: ПОВОРОТ (осознание)
Правило 5 чувств: запах + осязание

Без штампов! Живые детали.

160 слов.{anti_repeat_context}""",

        "community": f"""РАЗРЕШЕНИЕ. Реакция подписчиков на тайну из главы 2.

{followers_metaphor} отреагировали на его откровенность.

Покажи конкретно:
- Что пишут в комментариях (цитаты)
- Как изменилось общение
- Голоса 2-3 конкретных подписчиков

Эмоциональная дуга: ПРИНЯТИЕ
НЕ общие рассуждения о "цифровых связях" - живые голоса людей!

Диалоги:
— Цитата подписчика 1
— Цитата подписчика 2

170 слов.{anti_repeat_context}""",

        "legacy": f"""ФИНАЛ. Приглашение в будущее (не мораль).

Что останется важного (без пафоса про "цифровое наследие").

Закончи приглашением:
"Я листаю ленту в поиске нового дикого цветка. А вдруг это будешь ты?"

Эмоциональная дуга: РОСТ рассказчика
Один конкретный образ вместо абстракций

Финальный крючок будущего, а не мораль о памяти.

140 слов.{anti_repeat_context}"""
    }
    
    prompt = prompts.get(chapter_type, "Создай живой текст без штампов.")
    
    return generate_text(prompt, max_tokens=400, temperature=0.8)
