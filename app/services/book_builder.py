import json
import base64
from io import BytesIO
from pathlib import Path
from PIL import Image, ImageFilter, ImageEnhance, ImageDraw, ImageFont
from app.services.llm_client import generate_text
import markdown
import pdfkit
import qrcode
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from typing import List, Tuple

def analyze_profile_data(posts_data: list) -> dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏"""
    if not posts_data:
        return {}
    
    profile = posts_data[0]
    posts = profile.get("latestPosts", [])
    
    analysis = {
        "username": profile.get("username", "Unknown"),
        "full_name": profile.get("fullName", ""),
        "bio": profile.get("biography", ""),
        "followers": profile.get("followersCount", 0),
        "following": profile.get("followsCount", 0),
        "posts_count": len(posts),
        "verified": profile.get("verified", False),
        "profile_pic": profile.get("profilePicUrl", ""),
        "locations": [],
        "captions": [],
        "hashtags": set(),
        "mentions": set(),
        "post_details": [],
        "total_likes": 0,
        "total_comments": 0,
        "post_dates": [],
        "most_liked_post": None,
        "most_commented_post": None,
        "common_hashtags": [],
        "mentioned_users": []
    }
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞—Ö
    for post in posts:
        post_info = {
            "caption": post.get("caption", ""),
            "location": post.get("locationName", ""),
            "likes": post.get("likesCount", 0),
            "comments": post.get("commentsCount", 0),
            "type": post.get("type", ""),
            "alt": post.get("alt", ""),
            "timestamp": post.get("timestamp", ""),
            "hashtags": post.get("hashtags", []),
            "mentions": post.get("mentions", []),
            "url": post.get("url", "")
        }
        analysis["post_details"].append(post_info)
        
        # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if post.get("likesCount"):
            analysis["total_likes"] += post["likesCount"]
            if not analysis["most_liked_post"] or post["likesCount"] > analysis["most_liked_post"]["likes"]:
                analysis["most_liked_post"] = post_info
                
        if post.get("commentsCount"):
            analysis["total_comments"] += post["commentsCount"]
            if not analysis["most_commented_post"] or post["commentsCount"] > analysis["most_commented_post"]["comments"]:
                analysis["most_commented_post"] = post_info
        
        if post.get("locationName"):
            analysis["locations"].append(post["locationName"])
        
        if post.get("caption"):
            analysis["captions"].append(post["caption"])
        
        if post.get("timestamp"):
            analysis["post_dates"].append(post["timestamp"])
            
        analysis["hashtags"].update(post.get("hashtags", []))
        analysis["mentions"].update(post.get("mentions", []))
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏
    hashtag_count = {}
    for post in posts:
        for hashtag in post.get("hashtags", []):
            hashtag_count[hashtag] = hashtag_count.get(hashtag, 0) + 1
    
    analysis["common_hashtags"] = sorted(hashtag_count.items(), key=lambda x: x[1], reverse=True)[:5]
    analysis["mentioned_users"] = list(analysis["mentions"])[:10]
    
    return analysis

def create_markdown_from_content(content: dict, analysis: dict, images: list[Path]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç Markdown –≤–µ—Ä—Å–∏—é –∫–Ω–∏–≥–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ PDF"""
    
    username = analysis.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    full_name = analysis.get('full_name', username)
    followers = analysis.get('followers', 0)
    following = analysis.get('following', 0)
    posts_count = analysis.get('posts_count', 0)
    bio = analysis.get('bio', '')
    verified = analysis.get('verified', False)
    total_likes = analysis.get('total_likes', 0)
    total_comments = analysis.get('total_comments', 0)
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Instagram
    real_captions = analysis.get('captions', [])[:6]
    common_hashtags = analysis.get('common_hashtags', [])[:5]
    mentioned_users = analysis.get('mentioned_users', [])[:5]
    locations = analysis.get('locations', [])[:5]
    most_liked = analysis.get('most_liked_post')
    
    markdown_content = f"""
# {content.get('title', '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–Ω–∏–≥–∞ –æ @' + username)}

*–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å–≤—è—â–µ–Ω–∏–µ*

---

## @{username}
### {full_name}
{f'‚úì **Verified**' if verified else ''}

---

## üéØ –¶–∏—Ñ—Ä—ã –≤–æ—Å—Ö–∏—â–µ–Ω–∏—è

| –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |
|------------|----------|
| üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ | {followers:,} |
| üì± –ü–æ—Å—Ç—ã | {posts_count} |
| üë• –ü–æ–¥–ø–∏—Å–∫–∏ | {following:,} |
| ‚ù§Ô∏è –õ–∞–π–∫–∏ | {total_likes:,} |
| üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ | {total_comments:,} |

{f'> *"{bio}"*' if bio else ''}

{content.get('engagement_story', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç —Å–∞–º–∞ –∑–∞ —Å–µ–±—è...')}

---

## üí´ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ

{content.get('intro', '–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Å–ª–æ–≤–∞ –æ –≤—Å—Ç—Ä–µ—á–µ...')}

---

## üì± Instagram-–∫–Ω–∏–≥–∞

### üìù –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –∫ –ø–æ—Å—Ç–∞–º

{"".join([f'> "{caption}"\n\n' for caption in real_captions if caption])}



### üìç –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞

{chr(10).join([f'- üìç {location}' for location in locations])}

{content.get('locations_journey', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–µ—Å—Ç–∞–º...')}

### üë• –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–∑–µ–π

{" ".join([f'`@{user}`' for user in mentioned_users])}

{f'''
### üèÜ –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç

> "{most_liked.get("caption", "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏")}"

**‚ù§Ô∏è {most_liked.get("likes", 0)} –ª–∞–π–∫–æ–≤ ‚Ä¢ üí¨ {most_liked.get("comments", 0)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤**
''' if most_liked else ''}

---

## üñºÔ∏è –ì–∞–ª–µ—Ä–µ—è –º–æ–º–µ–Ω—Ç–æ–≤

{content.get('captions_analysis', '–ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–µ–π –∫ –ø–æ—Å—Ç–∞–º...')}

---

## üåü –¶–∏—Ç–∞—Ç–∞

> *"–ö—Ä–∞—Å–æ—Ç–∞ - —è–∑—ã–∫, –ø–æ–Ω—è—Ç–Ω—ã–π –≤—Å–µ–º"*
> 
> ‚Äî *–†–∞–ª—å—Ñ –≠–º–µ—Ä—Å–æ–Ω*

---

## üíù –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ

{content.get('final_message', '–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –≤–æ—Å—Ö–∏—â–µ–Ω–∏—è...')}

---

*–° –∏—Å–∫—Ä–µ–Ω–Ω–∏–º –≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ–º ‚ù§*

*–°–æ–∑–¥–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è*

‚ù¶ ‚ùß ‚ù¶
"""
    
    return markdown_content

def build_romantic_book(run_id: str, images: list[Path], texts: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∫–Ω–∏–≥–∏-–ø–æ–¥–∞—Ä–∫–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        run_dir = Path("data") / run_id
        posts_json = run_dir / "posts.json"
        images_dir = run_dir / "images"
        
        if posts_json.exists():
            posts_data = json.loads(posts_json.read_text(encoding="utf-8"))
        else:
            posts_data = []
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö
        actual_images = []
        if images_dir.exists():
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏
            for img_file in sorted(images_dir.glob("*")):
                if img_file.suffix.lower() in ['.jpg', '.jpeg', '.png', '.webp']:
                    actual_images.append(img_file)
        
        print(f"üíï –°–æ–∑–¥–∞–µ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–Ω–∏–≥—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è")
        print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {len(actual_images)} –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ {images_dir}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        analysis = analyze_profile_data(posts_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        romantic_content = generate_romantic_content(analysis, actual_images)
        
        # –°–æ–∑–¥–∞–µ–º HTML –≤ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ
        html = create_romantic_book_html(romantic_content, analysis, actual_images)
        
        # –°–æ–∑–¥–∞–µ–º Markdown –≤–µ—Ä—Å–∏—é
        markdown_content = create_markdown_from_content(romantic_content, analysis, actual_images)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
        out = Path("data") / run_id
        out.mkdir(parents=True, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
        html_file = out / "book.html"
        html_file.write_text(html, encoding="utf-8")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Markdown —Ñ–∞–π–ª
        markdown_file = out / "book.md"
        markdown_file.write_text(markdown_content, encoding="utf-8")
        
        # –°–æ–∑–¥–∞–µ–º PDF —á–µ—Ä–µ–∑ Markdown ‚Üí HTML ‚Üí PDF
        try:
            print("üìÑ –°–æ–∑–¥–∞–µ–º PDF —á–µ—Ä–µ–∑ Markdown...")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML —Å –∫—Ä–∞—Å–∏–≤—ã–º —Å—Ç–∏–ª–µ–º
            markdown_html = markdown.markdown(markdown_content, extensions=['tables', 'toc'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è PDF
            styled_html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>–ö–Ω–∏–≥–∞ @{analysis.get("username", "")}</title>
                <style>
                    body {{
                        font-family: 'Crimson Text', serif;
                        line-height: 1.8;
                        color: #1a1a1a;
                        background: white;
                        margin: 0;
                        padding: 40px;
                        max-width: 800px;
                        margin: 0 auto;
                    }}
                    
                    h1 {{
                        font-family: 'Playfair Display', serif;
                        font-size: 2.5em;
                        color: #1a1a1a;
                        text-align: center;
                        margin-bottom: 10px;
                    }}
                    
                    h2 {{
                        font-family: 'Playfair Display', serif;
                        font-size: 2em;
                        color: #1a1a1a;
                        border-bottom: 2px solid #666666;
                        padding-bottom: 10px;
                        margin-top: 40px;
                    }}
                    
                    h3 {{
                        font-family: 'Playfair Display', serif;
                        font-size: 1.4em;
                        color: #1a1a1a;
                        margin-top: 30px;
                    }}
                    
                    p {{
                        font-size: 12pt;
                        text-align: justify;
                        margin-bottom: 15px;
                        text-indent: 1.5em;
                    }}
                    
                    blockquote {{
                        background: #f8f9fa;
                        border-left: 4px solid #666666;
                        padding: 15px 20px;
                        margin: 20px 0;
                        font-style: italic;
                        border-radius: 5px;
                    }}
                    
                    table {{
                        width: 100%;
                        border-collapse: collapse;
                        margin: 20px 0;
                        background: white;
                        border-radius: 8px;
                        overflow: hidden;
                    }}
                    
                    th, td {{
                        padding: 12px;
                        text-align: left;
                        border-bottom: 1px solid #e9ecef;
                    }}
                    
                    th {{
                        background: #1a1a1a;
                        color: white;
                        font-weight: 600;
                    }}
                    
                    code {{
                        background: #1a1a1a;
                        color: white;
                        padding: 3px 8px;
                        border-radius: 12px;
                        font-size: 0.9em;
                        margin: 2px;
                        display: inline-block;
                    }}
                </style>
            </head>
            <body>
                {markdown_html}
            </body>
            </html>
            """
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –≤–µ—Ä—Å–∏—é –¥–ª—è PDF
            pdf_html_file = out / "book_for_pdf.html"
            pdf_html_file.write_text(styled_html, encoding="utf-8")
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è wkhtmltopdf
            options = {
                'page-size': 'A4',
                'margin-top': '1.5cm',
                'margin-right': '1.5cm',
                'margin-bottom': '1.5cm',
                'margin-left': '1.5cm',
                'encoding': "UTF-8",
                'no-outline': None,
                'enable-local-file-access': None,
                'print-media-type': None,
                'disable-smart-shrinking': None,
                'header-center': f'Instagram –∫–Ω–∏–≥–∞ @{analysis.get("username", "")}',
                'header-font-size': '10',
                'header-spacing': '10',
                'footer-center': '[page] –∏–∑ [topage]',
                'footer-font-size': '10',
                'footer-spacing': '10'
            }
            
            # –°–æ–∑–¥–∞–µ–º PDF
            pdfkit.from_file(str(pdf_html_file), str(out / "book.pdf"), options=options)
            
            print(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∫–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞!")
            print(f"üìÑ PDF –≤–µ—Ä—Å–∏—è: {out / 'book.pdf'}")
            print(f"üìù Markdown –≤–µ—Ä—Å–∏—è: {out / 'book.md'}")
            print(f"üìñ HTML –≤–µ—Ä—Å–∏—è: {out / 'book.html'}")
            
        except Exception as pdf_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {pdf_error}")
            print(f"üìñ –î–æ—Å—Ç—É–ø–Ω—ã Markdown –∏ HTML –≤–µ—Ä—Å–∏–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–∏–≥–∏: {e}")
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        try:
            basic_html = f"""
            <html>
            <head>
                <title>–ö–Ω–∏–≥–∞</title>
                <style>
                    body {{ background: white; font-family: serif; padding: 20px; }}
                    .error {{ background: #f8f9fa; padding: 20px; border-radius: 10px; text-align: center; }}
                </style>
            </head>
            <body>
                <div class="error">
                    <h1>üìñ –ö–Ω–∏–≥–∞</h1>
                    <p>–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–∏–≥–∏: {e}</p>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ</p>
                </div>
            </body>
            </html>
            """
            out = Path("data") / run_id
            out.mkdir(parents=True, exist_ok=True)
            
            html_file = out / "book.html"
            html_file.write_text(basic_html, encoding="utf-8")
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {out / 'book.html'}")
            
        except Exception as final_error:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {final_error}")

def apply_dream_pastel_effect(img: Image.Image) -> Image.Image:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç Dream-Pastel –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–µ
        if img is None or img.size[0] == 0 or img.size[1] == 0:
            print("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return img
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if img.mode != 'RGB':
            img = img.convert('RGB')
        
        # –õ—ë–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ
        img = img.filter(ImageFilter.GaussianBlur(1.2))
        
        # –¶–≤–µ—Ç–æ–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤ —Ç–µ–ø–ª—ã–µ —Ç–æ–Ω–∞
        enhancer = ImageEnhance.Color(img)
        img = enhancer.enhance(1.15)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª—ã–π overlay
        overlay = Image.new('RGBA', img.size, (255, 220, 210, 25))  # peach #ffdcd2
        img = img.convert('RGBA')
        img = Image.alpha_composite(img, overlay)
        
        # –î–æ–±–∞–≤–ª—è–µ–º grain (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        try:
            noise = np.random.randint(0, 15, (img.size[1], img.size[0], 3), dtype=np.uint8)
            noise_img = Image.fromarray(noise, 'RGB').convert('RGBA')
            noise_overlay = Image.new('RGBA', img.size, (0, 0, 0, 0))
            noise_overlay.paste(noise_img, (0, 0))
            img = Image.alpha_composite(img, noise_overlay)
        except Exception as noise_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à—É–º–∞: {noise_error}")
        
        # –õ–µ–≥–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏
        enhancer = ImageEnhance.Brightness(img)
        img = enhancer.enhance(1.05)
        
        return img.convert('RGB')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ Dream-Pastel —ç—Ñ—Ñ–µ–∫—Ç–∞: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            return img.convert('RGB') if img.mode != 'RGB' else img
        except:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
            placeholder = Image.new('RGB', (400, 300), (240, 240, 240))
            return placeholder

def create_collage_spread(img1: Image.Image, img2: Image.Image, caption: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–∞–∂-—Ä–∞–∑–≤–æ—Ä–æ—Ç –∏–∑ –¥–≤—É—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if img1 is None or img2 is None:
            print("‚ùå –û–¥–Ω–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–ª–ª–∞–∂–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return ""
            
        if img1.size[0] == 0 or img1.size[1] == 0 or img2.size[0] == 0 or img2.size[1] == 0:
            print("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–ª–ª–∞–∂–∞")
            return ""
        
        # –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç –¥–ª—è –∫–æ–ª–ª–∞–∂–∞
        canvas_width = 1200
        canvas_height = 800
        canvas = Image.new('RGB', (canvas_width, canvas_height), (255, 250, 245))
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img1_size = (500, 350)
        img2_size = (500, 350)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        try:
            img1 = img1.resize(img1_size, Image.Resampling.LANCZOS)
            img2 = img2.resize(img2_size, Image.Resampling.LANCZOS)
        except Exception as resize_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞: {resize_error}")
            return ""
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º dream-pastel —ç—Ñ—Ñ–µ–∫—Ç
        img1 = apply_dream_pastel_effect(img1)
        img2 = apply_dream_pastel_effect(img2)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º –ø–æ–≤–æ—Ä–æ—Ç–æ–º
        try:
            img1_rotated = img1.rotate(-2, expand=True, fillcolor=(255, 250, 245))
            img2_rotated = img2.rotate(3, expand=True, fillcolor=(255, 250, 245))
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –Ω–∞ —Ö–æ–ª—Å—Ç–µ
            pos1 = (50, 150)
            pos2 = (650, 200)
            
            canvas.paste(img1_rotated, pos1)
            canvas.paste(img2_rotated, pos2)
        except Exception as rotation_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {rotation_error}")
            # –†–∞–∑–º–µ—â–∞–µ–º –±–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞
            canvas.paste(img1, (50, 150))
            canvas.paste(img2, (650, 200))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
        try:
            draw = ImageDraw.Draw(canvas)
            try:
                font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 24)
            except:
                font = ImageFont.load_default()
            
            # –¢–µ–∫—Å—Ç —Å —Ç–µ–Ω—å—é
            text_x = canvas_width // 2
            text_y = canvas_height - 100
            
            # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π caption
            if len(caption) > 50:
                caption = caption[:47] + "..."
            
            # –¢–µ–Ω—å
            draw.text((text_x + 2, text_y + 2), caption, font=font, fill=(0, 0, 0, 100), anchor="mm")
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            draw.text((text_x, text_y), caption, font=font, fill=(80, 60, 40), anchor="mm")
        except Exception as text_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {text_error}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        buffer = BytesIO()
        canvas.save(buffer, format='JPEG', quality=92)
        img_str = base64.b64encode(buffer.getvalue()).decode()
        return f"data:image/jpeg;base64,{img_str}"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–∞–∂–∞: {e}")
        return ""

def create_infographic(analysis: dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    try:
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))
        fig.patch.set_facecolor('#fff5f0')
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        months = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω']
        likes_growth = [100, 150, 220, 380, 520, analysis.get('total_likes', 600)]
        
        ax1.plot(months, likes_growth, color='#ff6b9d', linewidth=3, marker='o', markersize=8)
        ax1.fill_between(months, likes_growth, alpha=0.3, color='#ffb3d1')
        ax1.set_title('–†–æ—Å—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏', fontsize=14, color='#8b5a5a')
        ax1.set_ylabel('–õ–∞–π–∫–∏', color='#8b5a5a')
        ax1.grid(True, alpha=0.3)
        
        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ Followers/Following
        followers = analysis.get('followers', 1000)
        following = analysis.get('following', 500)
        sizes = [followers, following]
        labels = ['–ü–æ–¥–ø–∏—Å—á–∏–∫–∏', '–ü–æ–¥–ø–∏—Å–∫–∏']
        colors = ['#ff6b9d', '#ffd93d']
        
        ax2.pie(sizes, labels=labels, colors=colors, autopct='%1.0f', startangle=90)
        ax2.set_title('–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫', fontsize=14, color='#8b5a5a')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ base64
        buffer = BytesIO()
        plt.savefig(buffer, format='PNG', dpi=150, bbox_inches='tight', facecolor='#fff5f0')
        plt.close()
        
        img_str = base64.b64encode(buffer.getvalue()).decode()
        return f"data:image/png;base64,{img_str}"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏: {e}")
        return ""

def generate_playlist_for_photo(caption: str, index: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    mood_tracks = {
        0: "Lana Del Rey - Young and Beautiful",
        1: "The 1975 - Somebody Else", 
        2: "Billie Eilish - lovely",
        3: "Clairo - Pretty Girl",
        4: "Rex Orange County - Best Friend",
        5: "Boy Pablo - Everytime",
        6: "Cuco - Lo Que Siento",
        7: "Mac DeMarco - Chamber of Reflection"
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è (—Å fallback)
    try:
        prompt = f"""–ü–æ–¥–±–µ—Ä–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π dreampop/indie-—Ç—Ä–µ–∫ –∫ –æ–ø–∏—Å–∞–Ω–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: "{caption[:100]}..."
        
        –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞"
        –°—Ç–∏–ª—å: –º–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π, –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Å–æ–∑–µ—Ä—Ü–∞–Ω–∏—è —Ñ–æ—Ç–æ.
        """
        
        suggested_track = generate_text(prompt, max_tokens=50)
        if suggested_track and len(suggested_track.strip()) > 5:
            return suggested_track.strip()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
    
    return mood_tracks.get(index % len(mood_tracks), "Dream Valley - Sunset Memories")

def create_qr_code(username: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∞—Ä—Ö–∏–≤"""
    try:
        # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ —Å —Å—Å—ã–ª–∫–æ–π
        qr_url = f"https://instagram.com/{username}"
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(qr_url)
        qr.make(fit=True)
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞
        qr_img = qr.make_image(fill_color="black", back_color="white")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        buffer = BytesIO()
        qr_img.save(buffer, format='PNG')
        img_str = base64.b64encode(buffer.getvalue()).decode()
        return f"data:image/png;base64,{img_str}"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞: {e}")
        return ""

def format_statistics_creatively(stat_name: str, value: int) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    creative_formats = {
        'followers': f"{value:,} —Å–µ—Ä–¥–µ—Ü –≤ –∑—Ä–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–ª–µ",
        'following': f"{value:,} –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏—Ö –≥–æ–ª–æ—Å–æ–≤",
        'posts': f"{value} –∫–∞–¥—Ä–æ–≤ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞", 
        'likes': f"{value:,} –º–æ–º–µ–Ω—Ç–æ–≤ —Å—á–∞—Å—Ç—å—è",
        'comments': f"{value:,} –∏—Å–∫—Ä–µ–Ω–Ω–∏—Ö —Å–ª–æ–≤",
        'stories': f"{value} –º–≥–Ω–æ–≤–µ–Ω–∏–π –¥—É—à–∏"
    }
    return creative_formats.get(stat_name, f"{value:,}")

def add_text_rhythm(text: str) -> str:
    """–£–ª—É—á—à–∞–µ—Ç —Ä–∏—Ç–º —Ç–µ–∫—Å—Ç–∞, —á–µ—Ä–µ–¥—É—è –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    sentences = text.split('. ')
    improved_sentences = []
    
    for i, sentence in enumerate(sentences):
        # –ö–∞–∂–¥–æ–µ 3-–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–ª–∞–µ–º —Ü–∏—Ç–∞—Ç–æ–π
        if i > 0 and i % 3 == 0 and len(sentence) > 30:
            improved_sentences.append(f'<blockquote>"{sentence.strip()}."</blockquote>')
        else:
            improved_sentences.append(sentence.strip() + '.')
    
    return ' '.join(improved_sentences)

def add_english_voiceover(text: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ voice-over —Ñ—Ä–∞–∑—ã"""
    voiceover_phrases = [
        "*moment of truth*",
        "*pure magic*", 
        "*breathe it in*",
        "*frame perfect*",
        "*golden hour*",
        "*soul deep*",
        "*simply beautiful*",
        "*life in motion*"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º voice-over –≤ –∫–æ–Ω–µ—Ü –∫–∞–∂–¥–æ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ –∞–±–∑–∞—Ü–∞
    if len(text) > 100:
        import random
        phrase = random.choice(voiceover_phrases)
        return f"{text} <em class='voiceover'>{phrase}</em>"
    return text

def generate_romantic_content(analysis: dict, images: list[Path]) -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö Instagram"""
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    username = analysis.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    full_name = analysis.get('full_name', username)
    bio = analysis.get('bio', '')
    followers = max(0, analysis.get('followers', 0))
    following = max(0, analysis.get('following', 0))
    posts_count = max(0, analysis.get('posts_count', 0))
    total_likes = max(0, analysis.get('total_likes', 0))
    total_comments = max(0, analysis.get('total_comments', 0))
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Instagram —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    real_captions = analysis.get('captions', [])[:10] if analysis.get('captions') else ['–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –º–æ–º–µ–Ω—Ç –∂–∏–∑–Ω–∏']
    common_hashtags = analysis.get('common_hashtags', [])[:5] if analysis.get('common_hashtags') else [('beautiful', 1), ('life', 1)]
    mentioned_users = analysis.get('mentioned_users', [])[:5] if analysis.get('mentioned_users') else []
    locations = analysis.get('locations', [])[:5] if analysis.get('locations') else ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ']
    most_liked = analysis.get('most_liked_post')
    most_commented = analysis.get('most_commented_post')
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö
    instagram_context = f"""
    === –†–ï–ê–õ–¨–ù–´–ô –ü–†–û–§–ò–õ–¨ INSTAGRAM ===
    –ò–º—è: @{username} ({full_name})
    {f"–û–ø–∏—Å–∞–Ω–∏–µ: {bio}" if bio else ""}
    –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {followers:,} —á–µ–ª–æ–≤–µ–∫
    –ü–æ–¥–ø–∏—Å–∫–∏: {following:,} –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    –ü—É–±–ª–∏–∫–∞—Ü–∏–π: {posts_count} –ø–æ—Å—Ç–æ–≤
    –û–±—â–∏–µ –ª–∞–π–∫–∏: {total_likes:,}
    –û–±—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {total_comments:,}
    
    === –†–ï–ê–õ–¨–ù–´–ï –ü–û–î–ü–ò–°–ò –ö –ü–û–°–¢–ê–ú ===
    {chr(10).join([f'"{caption}"' for caption in real_captions[:5] if caption and len(caption.strip()) > 0])}
    
    === –ü–û–ü–£–õ–Ø–†–ù–´–ï –•–≠–®–¢–ï–ì–ò ===
    {', '.join([f'#{hashtag[0]} ({hashtag[1]}x)' for hashtag in common_hashtags if hashtag and len(hashtag) >= 2])}
    
    === –£–ü–û–ú–ò–ù–ê–ù–ò–Ø –î–†–£–ó–ï–ô ===
    {', '.join([f'@{user}' for user in mentioned_users if user and len(user.strip()) > 0])}
    
    === –ü–û–°–ï–©–ï–ù–ù–´–ï –ú–ï–°–¢–ê ===
    {', '.join([loc for loc in locations if loc and len(loc.strip()) > 0])}
    
    === –°–ê–ú–´–ô –ü–û–ü–£–õ–Ø–†–ù–´–ô –ü–û–°–¢ ===
    {f'"{most_liked["caption"]}" - {most_liked["likes"]} –ª–∞–π–∫–æ–≤' if most_liked and most_liked.get("caption") else "–°–∞–º—ã–µ —è—Ä–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –∂–∏–∑–Ω–∏"}
    """
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
    prompts = {
        "prologue": f"""
        –ù–∞–ø–∏—à–∏ –ø—Ä–æ–ª–æ–≥ –∞–≤—Ç–æ—Ä–∞ (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞) - –ø–æ—á–µ–º—É –º—ã —Å–æ–∑–¥–∞–µ–º —Ç–∞–∫–∏–µ Instagram-–∫–Ω–∏–≥–∏.
        
        –†–∞—Å—Å–∫–∞–∂–∏:
        - –ö–∞–∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ —Å—Ç–∞–ª–∏ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º–æ–π –∏—Å–∫—É—Å—Å—Ç–≤–∞
        - –ü–æ—á–µ–º—É –∫–∞–∂–¥—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –±—ã—Ç—å –∫–Ω–∏–≥–æ–π
        - –§–∏–ª–æ—Å–æ—Ñ–∏—é –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –≤ –æ—Å—è–∑–∞–µ–º—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        
        –°—Ç–∏–ª—å: –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π, —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –≤—Å—Ç–∞–≤–∫–∞–º–∏ voice-over.
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 2-3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∑–∞—Ç–µ–º 1 –¥–ª–∏–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞, –∑–∞—Ç–µ–º —Ü–∏—Ç–∞—Ç–∞.
        –ú–∞–∫—Å–∏–º—É–º 500 —Å–ª–æ–≤.
        """,
        
        "title": f"""
        –°–æ–∑–¥–∞–π –ø–æ—ç—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è Instagram-–∫–Ω–∏–≥–∏ @{username}.
        –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ: {bio if bio else '—Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –¥—É—à–∞'}
        –ú–∞–∫—Å–∏–º—É–º 4 —Å–ª–æ–≤–∞, —Å –Ω–∞–º–µ–∫–æ–º –Ω–∞ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç—å.
        """,
        
        "chapter1_frame": f"""
        –ì–ª–∞–≤–∞ 1 - –ö–ê–î–†. –û–ø–∏—à–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å @{username} –∫–∞–∫ –∫–∏–Ω–æ—Ä–µ–∂–∏—Å—Å–µ—Ä.
        
        –î–ê–ù–ù–´–ï: {posts_count} –ø–æ—Å—Ç–æ–≤, —Ö—ç—à—Ç–µ–≥–∏: {', '.join([f'#{h[0]}' for h in common_hashtags[:3] if h and len(h) >= 2])}
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
        - –ö–∞–¥—Ä: –∫–∞–∫ –æ–Ω–∏ –∫–æ–º–ø–æ–Ω—É—é—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        - –≠–º–æ—Ü–∏—è: –∫–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥–∞—é—Ç
        - –£—Ä–æ–∫: —á–µ–º—É —É—á–∏—Ç –∏—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã–π —è–∑—ã–∫
        
        –î–æ–±–∞–≤—å —Ä–µ–∂–∏—Å—Å–µ—Ä—Å–∫–∏–µ —Ä–µ–º–∞—Ä–∫–∏ –∫—É—Ä—Å–∏–≤–æ–º: "Cut ‚Äî –¥–µ—Ä–∂–∏—Ç–µ –∫–∞–¥—Ä —Ç–∞–∫, —á—Ç–æ–±—ã..."
        –ú–∞–∫—Å–∏–º—É–º 800 —Å–ª–æ–≤.
        """,
        
        "chapter2_emotion": f"""
        –ì–ª–∞–≤–∞ 2 - –≠–ú–û–¶–ò–Ø. –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ—è @{username}.
        
        –ü–û–î–ü–ò–°–ò: {chr(10).join([f'"{caption[:100]}..."' for caption in real_captions[:3] if caption and len(caption.strip()) > 0])}
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ –ø–æ–¥–ø—É–Ω–∫—Ç–∞–º:
        - –ö–∞–¥—Ä: –∫–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –≤–∏–¥–Ω—ã –Ω–∞ —Ñ–æ—Ç–æ
        - –≠–º–æ—Ü–∏—è: –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä  
        - –£—Ä–æ–∫: –∫–∞–∫ –Ω–∞–π—Ç–∏ –∫—Ä–∞—Å–æ—Ç—É –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç–∏
        
        –ß–µ—Ä–µ–¥—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –î–æ–±–∞–≤—å voice-over –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.
        –ú–∞–∫—Å–∏–º—É–º 800 —Å–ª–æ–≤.
        """,
        
        "chapter3_journey": f"""
        –ì–ª–∞–≤–∞ 3 - –ü–£–¢–ï–®–ï–°–¢–í–ò–ï. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –¥—É—à–∏ —á–µ—Ä–µ–∑ –ª–æ–∫–∞—Ü–∏–∏.
        
        –ú–ï–°–¢–ê: {', '.join([loc for loc in locations if loc and len(loc.strip()) > 0]) if any(loc and len(loc.strip()) > 0 for loc in locations) else '—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞'}
        
        –ü–æ–¥–ø—É–Ω–∫—Ç—ã:
        - –ö–∞–¥—Ä: –∫–∞–∫ –º–µ—Å—Ç–∞ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –∫–∞–¥—Ä
        - –≠–º–æ—Ü–∏—è: —á—Ç–æ –∏—â–µ—Ç –¥—É—à–∞ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö
        - –£—Ä–æ–∫: –∫–∞–∫ –≥–µ–æ–≥—Ä–∞—Ñ–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä
        –ú–∞–∫—Å–∏–º—É–º 800 —Å–ª–æ–≤.
        """,
        
        "chapter4_community": f"""
        –ì–ª–∞–≤–∞ 4 - –°–û–û–ë–©–ï–°–¢–í–û. –°–≤—è–∑–∏ —á–µ—Ä–µ–∑ —ç–∫—Ä–∞–Ω.
        
        –î–ê–ù–ù–´–ï: {followers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è {', '.join(mentioned_users[:3]) if mentioned_users else '–±–ª–∏–∑–∫–∏—Ö –¥—Ä—É–∑–µ–π'}
        
        - –ö–∞–¥—Ä: –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
        - –≠–º–æ—Ü–∏—è: —Ç–µ–ø–ª–æ—Ç–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π –æ–Ω–ª–∞–π–Ω
        - –£—Ä–æ–∫: –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –≤ —Å–µ—Ç–∏
        –ú–∞–∫—Å–∏–º—É–º 800 —Å–ª–æ–≤.
        """,
        
        "chapter5_legacy": f"""
        –ì–ª–∞–≤–∞ 5 - –ù–ê–°–õ–ï–î–ò–ï. –ß—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–ª–µ–¥–∞.
        
        –ò–¢–û–ì–ò: {posts_count} –ø–æ—Å—Ç–æ–≤ = –∂–∏–∑–Ω–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
        
        - –ö–∞–¥—Ä: –∫–∞–∫ –ø–æ—Å—Ç—ã —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –±–∏–æ–≥—Ä–∞—Ñ–∏—é
        - –≠–º–æ—Ü–∏—è: —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
        - –£—Ä–æ–∫: —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è
        
        –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∂–∏—Å—Å–µ—Ä—Å–∫–∞—è —Ä–µ–º–∞—Ä–∫–∞ –æ –≤–µ—á–Ω–æ—Å—Ç–∏ –º–≥–Ω–æ–≤–µ–Ω–∏–π.
        –ú–∞–∫—Å–∏–º—É–º 800 —Å–ª–æ–≤.
        """
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    content = {}
    for key, prompt in prompts.items():
        print(f"üíï –°–æ–∑–¥–∞–µ–º {key} —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫...")
        try:
            generated_text = generate_text(prompt, max_tokens=1500)
            
            if generated_text and len(generated_text.strip()) > 20:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è —Ä–∏—Ç–º–∞ –∏ voice-over
                generated_text = add_text_rhythm(generated_text)
                generated_text = add_english_voiceover(generated_text)
                content[key] = generated_text
            else:
                raise ValueError("–ü—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç AI")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {key}: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
            fallbacks = {
                "prologue": f"""–í —ç–ø–æ—Ö—É —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏–π –∫–∞–∂–¥—ã–π –ø—Ä–æ—Ñ–∏–ª—å Instagram —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–Ω–∏–≥–æ–π. –ü–∏–∫—Å–µ–ª–∏ –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –ø–∞–º—è—Ç—å. –õ–∞–π–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–∞—Å–ª–µ–¥–∏–µ–º. <blockquote>"–ú—ã –∂–∏–≤–µ–º –≤ –º–∏—Ä–µ, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–æ–º."</blockquote> *Digital soul meets paper heart.* –≠—Ç–∞ –∫–Ω–∏–≥–∞ ‚Äî –º–æ—Å—Ç –º–µ–∂–¥—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –º–µ–∂–¥—É –º–≥–Ω–æ–≤–µ–Ω–∏–µ–º –∏ –≤–µ—á–Ω–æ—Å—Ç—å—é.""",
                
                "title": f"–ö–∞–¥—Ä—ã –∂–∏–∑–Ω–∏ @{username}",
                
                "chapter1_frame": f"""*Cut ‚Äî –∫–∞–º–µ—Ä–∞ –ª–æ–≤–∏—Ç —Å–≤–µ—Ç –≤ –≥–ª–∞–∑–∞—Ö @{username}.* –ö–∞–∂–¥—ã–π –∏–∑ {posts_count if posts_count > 0 else '1'} –ø–æ—Å—Ç–æ–≤ ‚Äî —ç—Ç–æ —Ä–µ–∂–∏—Å—Å–µ—Ä—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –ö–∞–¥—Ä –≥–æ–≤–æ—Ä–∏—Ç –±–æ–ª—å—à–µ —Å–ª–æ–≤. –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏. <blockquote>"–í–µ–ª–∏–∫–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è ‚Äî —ç—Ç–æ —Ç–∞, —á—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å."</blockquote> *Frame perfect.* –£—Ä–æ–∫: –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ –∂–∏–≤–µ—Ç —Ü–µ–ª–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è.""",
                
                "chapter2_emotion": f"""–ü–æ–¥–ø–∏—Å–∏ @{username} ‚Äî —ç—Ç–æ –ø–æ—ç–∑–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏. –ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏. –î–ª–∏–Ω–Ω—ã–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –∂–∏–∑–Ω–∏. <blockquote>"–°–ª–æ–≤–∞ –ø–æ–¥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π ‚Äî —ç—Ç–æ –æ–∫–Ω–æ –≤ –¥—É—à—É –∞–≤—Ç–æ—Ä–∞."</blockquote> *Pure emotion.* –ö–∞–∂–¥–∞—è –ø–æ–¥–ø–∏—Å—å —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Ç–∞–π–Ω—ã —Å–µ—Ä–¥—Ü–∞.""",
                
                "chapter3_journey": f"""–ì–µ–æ–≥—Ä–∞—Ñ–∏—è @{username}: {', '.join(locations[:2]) if locations and any(loc.strip() for loc in locations) else '–Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω—ã–µ —Ç—Ä–æ–ø—ã'}. –ö–∞–∂–¥–æ–µ –º–µ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –≤ –¥—É—à–µ. –ö–∞–¥—Ä –º–µ–Ω—è–µ—Ç—Å—è —Å —à–∏—Ä–æ—Ç–æ–π. <blockquote>"–ú—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–µ–±—è."</blockquote> *Wanderlust in pixels.*""",
                
                "chapter4_community": f"""{format_statistics_creatively('followers', followers)} –æ–±—Ä–∞–∑—É—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é. –¶–∏—Ñ—Ä–æ–≤–∞—è –±–ª–∏–∑–æ—Å—Ç—å —Ä–æ–∂–¥–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ —á—É–≤—Å—Ç–≤–∞. –ö–∞–∂–¥—ã–π –ª–∞–π–∫ ‚Äî —Å–≤—è–∑—å. <blockquote>"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ª—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞—é—Ç, –∫–æ–≥–¥–∞ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç —Å–µ—Ä–¥—Ü–∞."</blockquote> *Connection beyond screens.*""",
                
                "chapter5_legacy": f"""–ß—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ—Ç –Ω–∞—à–∏—Ö Instagram-–∏—Å—Ç–æ—Ä–∏–π? {posts_count if posts_count > 0 else '–ö–∞–∂–¥—ã–π'} –ø–æ—Å—Ç ‚Äî –∫–∞–ø—Å—É–ª–∞ –≤—Ä–µ–º–µ–Ω–∏. –¶–∏—Ñ—Ä–æ–≤–æ–µ –Ω–∞—Å–ª–µ–¥–∏–µ –æ–±—Ä–µ—Ç–∞–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É. <blockquote>"–ú—ã —Å–æ–∑–¥–∞–µ–º –±—É–¥—É—â–µ–µ –∏–∑ –ø–∏–∫—Å–µ–ª–µ–π –ø—Ä–æ—à–ª–æ–≥–æ."</blockquote> *Forever captured.* *Final cut ‚Äî –∏ –∫–∞–º–µ—Ä–∞ –æ—Ç—ä–µ–∑–∂–∞–µ—Ç, –æ—Å—Ç–∞–≤–ª—è—è –≤–µ—á–Ω–æ—Å—Ç—å –º–≥–Ω–æ–≤–µ–Ω–∏–π...*"""
            }
            content[key] = fallbacks.get(key, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è...")
    
    return content

def create_romantic_book_html(content: dict, analysis: dict, images: list[Path]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç HTML –∫–Ω–∏–≥—É –≤ —Å—Ç–∏–ª–µ –Ω–∞—Å—Ç–æ—è—â–µ–π –ø–µ—á–∞—Ç–Ω–æ–π –∫–Ω–∏–≥–∏ —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º"""
    
    username = analysis.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    full_name = analysis.get('full_name', username)
    followers = analysis.get('followers', 0)
    following = analysis.get('following', 0)
    posts_count = analysis.get('posts_count', 0)
    bio = analysis.get('bio', '')
    verified = analysis.get('verified', False)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ
    processed_images = []
    
    for i, img_path in enumerate(images[:8]):
        if img_path.exists():
            try:
                with Image.open(img_path) as img:
                    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–Ω–∏–∂–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                    if img.mode != 'RGB':
                        img = img.convert('RGB')
                    
                    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–Ω–∏–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                    img.thumbnail((800, 600), Image.Resampling.LANCZOS)
                    
                    # –õ–µ–≥–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏
                    enhancer = ImageEnhance.Contrast(img)
                    img = enhancer.enhance(1.05)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                    buffer = BytesIO()
                    img.save(buffer, format='JPEG', quality=95)
                    img_str = base64.b64encode(buffer.getvalue()).decode()
                    processed_images.append(f"data:image/jpeg;base64,{img_str}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_path}: {e}")
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª—é–±–æ–≤–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
    real_captions = analysis.get('captions', ['–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –º–æ–º–µ–Ω—Ç'])[:6]
    locations = analysis.get('locations', ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ'])[:5]
    
    # HTML –∫–Ω–∏–≥–∏ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ
    html = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>–ö–Ω–∏–≥–∞ –æ @{username}</title>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Playfair+Display:wght@400;700&family=Cormorant+Garamond:ital,wght@0,400;0,500;1,400&display=swap" rel="stylesheet">
        
        <style>
        body {{
            font-family: 'Crimson Text', serif;
            font-size: 12pt;
            line-height: 1.8;
            color: #1a1a1a;
            background: white;
            margin: 0;
            padding: 0;
            max-width: 800px;
            margin: 0 auto;
        }}
        
        .page {{
            min-height: 90vh;
            padding: 3cm 2.5cm;
            margin-bottom: 2cm;
            page-break-after: always;
            background: white;
            border: none;
        }}
        
        .page:last-child {{
            page-break-after: auto;
        }}
        
        h1 {{
            font-family: 'Playfair Display', serif;
            font-size: 28pt;
            text-align: center;
            margin: 4cm 0 2cm 0;
            color: #1a1a1a;
            font-weight: 400;
            letter-spacing: 1px;
        }}
        
        h2 {{
            font-family: 'Playfair Display', serif;
            font-size: 18pt;
            color: #1a1a1a;
            margin: 3cm 0 1.5cm 0;
            text-align: left;
            font-weight: 400;
        }}
        
        h3 {{
            font-family: 'Playfair Display', serif;
            font-size: 14pt;
            color: #1a1a1a;
            margin: 2cm 0 1cm 0;
            font-weight: 400;
        }}
        
        .chapter-number {{
            font-family: 'Cormorant Garamond', serif;
            font-size: 14pt;
            color: #666;
            text-align: center;
            margin-bottom: 1cm;
            font-style: italic;
        }}
        
        p {{
            margin: 0 0 1.5em 0;
            text-align: justify;
            text-indent: 2em;
        }}
        
        .first-paragraph {{
            text-indent: 0;
            font-size: 13pt;
        }}
        
        .drop-cap {{
            float: left;
            font-family: 'Playfair Display', serif;
            font-size: 72pt;
            line-height: 60pt;
            padding-right: 8pt;
            margin-top: 4pt;
            color: #1a1a1a;
        }}
        
        blockquote {{
            font-style: italic;
            margin: 2em 3em;
            padding: 0;
            border: none;
            text-align: center;
            font-size: 11pt;
            color: #444;
        }}
        
        .quote-author {{
            text-align: right;
            margin-top: 1em;
            font-size: 10pt;
            color: #666;
        }}
        
        .photo-page {{
            text-align: center;
            page-break-inside: avoid;
        }}
        
        .photo {{
            margin: 2cm 0 1.5cm 0;
            text-align: center;
        }}
        
        .photo img {{
            max-width: 100%;
            max-height: 400px;
            border: 1px solid #ddd;
            padding: 10px;
            background: white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }}
        
        .photo-caption {{
            font-family: 'Cormorant Garamond', serif;
            font-style: italic;
            font-size: 11pt;
            color: #666;
            margin-top: 1cm;
            text-align: center;
        }}
        
        .photo-inline {{
            float: right;
            margin: 0 0 1em 2em;
            width: 300px;
        }}
        
        .photo-inline img {{
            width: 100%;
            border: 1px solid #ddd;
            padding: 8px;
            background: white;
            box-shadow: 0 2px 6px rgba(0,0,0,0.08);
        }}
        
        .stats-elegant {{
            margin: 2cm 0;
            text-align: center;
            font-family: 'Cormorant Garamond', serif;
            font-size: 11pt;
            color: #666;
        }}
        
        .dedication {{
            text-align: center;
            font-style: italic;
            margin: 4cm 0;
            font-size: 12pt;
            color: #666;
        }}
        
        .chapter-separator {{
            text-align: center;
            margin: 3cm 0;
            font-size: 14pt;
            color: #ccc;
        }}
        
        .page-number {{
            position: absolute;
            bottom: 2cm;
            right: 2.5cm;
            font-size: 10pt;
            color: #999;
        }}
        
        @media print {{
            body {{
                margin: 0;
                padding: 0;
            }}
            .page {{
                page-break-after: always;
                margin: 0;
                box-shadow: none;
            }}
        }}
        </style>
    </head>
    <body>

    <!-- –û–ë–õ–û–ñ–ö–ê -->
    <div class="page">
        <h1>{content.get('title', f'–ò—Å—Ç–æ—Ä–∏—è @{username}')}</h1>
        
        <div class="dedication">
            <em>–ü–æ—Å–≤—è—â–∞–µ—Ç—Å—è —Ç–µ–º –º–æ–º–µ–Ω—Ç–∞–º,<br>
            —á—Ç–æ –¥–µ–ª–∞—é—Ç –∂–∏–∑–Ω—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π</em>
        </div>
        
        <div style="position: absolute; bottom: 4cm; left: 50%; transform: translateX(-50%); text-align: center;">
            <p style="font-family: 'Cormorant Garamond', serif; font-size: 11pt; color: #999; margin: 0;">
                –ö–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ª—é–±–æ–≤—å—é<br>
                {full_name if full_name != username else username}
            </p>
        </div>
    </div>

    <!-- –ü–†–û–õ–û–ì -->
    <div class="page">
        <div class="chapter-number">–ü—Ä–æ–ª–æ–≥</div>
        <h2>–û –∫—Ä–∞—Å–æ—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–∏–π</h2>
        
        <p class="first-paragraph">
            <span class="drop-cap">–í</span> –∫–∞–∂–¥–æ–π –∂–∏–∑–Ω–∏ –µ—Å—Ç—å –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞. –û–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–µ–∑–∞–º–µ—Ç–Ω–æ ‚Äî –≤ —É—Ç—Ä–µ–Ω–Ω–µ–º —Å–≤–µ—Ç–µ, –ø–∞–¥–∞—é—â–µ–º –Ω–∞ –ª–∏—Ü–æ, –≤ —Å–º–µ—Ö–µ —Å –¥—Ä—É–∑—å—è–º–∏, –≤ —Ç–∏—à–∏–Ω–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –≥–æ—Ä–æ–¥–∞. Instagram —Å—Ç–∞–ª –Ω–∞—à–∏–º —Å–ø–æ—Å–æ–±–æ–º –ª–æ–≤–∏—Ç—å —ç—Ç–∏ –º–≥–Ω–æ–≤–µ–Ω–∏—è, –Ω–æ —ç–∫—Ä–∞–Ω –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –≤—Å—é –∏—Ö –≥–ª—É–±–∏–Ω—É.
        </p>
        
        <p>
            –≠—Ç–∞ –∫–Ω–∏–≥–∞ ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–Ω—É—Ç—å —Ü–∏—Ñ—Ä–æ–≤—ã–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º –∏—Ö –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–µ—Å. –ó–¥–µ—Å—å –∫–∞–∂–¥–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–±—Ä–µ—Ç–∞–µ—Ç –Ω–æ–≤—É—é –∂–∏–∑–Ω—å, –∫–∞–∂–¥–∞—è –ø–æ–¥–ø–∏—Å—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å—Ç—Ä–æ—á–∫–æ–π –≤ –±–æ–ª—å—à–æ–π –∏—Å—Ç–æ—Ä–∏–∏. –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–±–æ—Ä–Ω–∏–∫ –ø–æ—Å—Ç–æ–≤ ‚Äî —ç—Ç–æ –ª–µ—Ç–æ–ø–∏—Å—å –¥—É—à–∏, –∑–∞–ø–∏—Å–∞–Ω–Ω–∞—è —Å–≤–µ—Ç–æ–º –∏ —Å–ª–æ–≤–∞–º–∏.
        </p>
        
        <blockquote>
            "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è ‚Äî —ç—Ç–æ —Å–µ–∫—Ä–µ—Ç –æ —Å–µ–∫—Ä–µ—Ç–µ. –ß–µ–º –±–æ–ª—å—à–µ –æ–Ω–∞ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —Ç–µ–º –º–µ–Ω—å—à–µ –≤—ã –∑–Ω–∞–µ—Ç–µ."
            <div class="quote-author">‚Äî –î–∞–π–∞–Ω –ê—Ä–±—É—Å</div>
        </blockquote>
        
        <p>
            –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —ç—Ç–æ–π –∫–Ω–∏–≥–∏, –º—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ–º –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –º–∏—Ä—É @{username}, –≥–¥–µ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä ‚Äî —ç—Ç–æ –æ–∫–Ω–æ –≤ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é —á—É–≤—Å—Ç–≤ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π.
        </p>
    </div>

    <!-- –ì–õ–ê–í–ê 1: –ü–û–†–¢–†–ï–¢ -->
    <div class="page">
        <div class="chapter-number">–ì–ª–∞–≤–∞ –ø–µ—Ä–≤–∞—è</div>
        <h2>–ü–æ—Ä—Ç—Ä–µ—Ç –≤ —Ü–∏—Ñ—Ä–æ–≤—É—é —ç–ø–æ—Ö—É</h2>
        
        <p class="first-paragraph">
            <span class="drop-cap">@</span>{username} ‚Äî —ç—Ç–æ –∏–º—è, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è {full_name if full_name != username else '—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å'}. –í –º–∏—Ä–µ Instagram, –≥–¥–µ –º–∏–ª–ª–∏–æ–Ω—ã –≥–æ–ª–æ—Å–æ–≤ –∑–≤—É—á–∞—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–¥–µ–ª—è–µ—Ç—Å—è —Å–≤–æ–µ–π –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –∏ –≥–ª—É–±–∏–Ω–æ–π.
        </p>
        
        <div class="stats-elegant">
            {format_statistics_creatively('followers', followers)}<br>
            {format_statistics_creatively('posts', posts_count)}<br>
            {"‚úì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç" if verified else ""}
        </div>
        
        <p>
            {bio if bio else '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π, –Ω–æ –∂–∏–∑–Ω—å, –æ—Ç—Ä–∞–∂–µ–Ω–Ω–∞—è –≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö, –≥–æ–≤–æ—Ä–∏—Ç –≥—Ä–æ–º—á–µ –ª—é–±—ã—Ö —Å–ª–æ–≤.'}
        </p>
        
        <p>
            –í –∫–∞–∂–¥–æ–º –ø–æ—Å—Ç–µ —á–∏—Ç–∞–µ—Ç—Å—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∞–≤—Ç–æ—Ä–∞. –í—ã–±–æ—Ä –∫–∞–¥—Ä–∞, –∏–≥—Ä–∞ —Å–≤–µ—Ç–∞ –∏ —Ç–µ–Ω–∏, –º–æ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑–∞–ª—Å—è –¥–æ—Å—Ç–æ–π–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Äî –≤—Å–µ —ç—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Ä—Ç—Ä–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∂–∏–≤—É—â–µ–≥–æ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–æ–≤.
        </p>
        
        <blockquote>
            "–ö–∞–∂–¥–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è ‚Äî —ç—Ç–æ –∞–≤—Ç–æ–ø–æ—Ä—Ç—Ä–µ—Ç –¥—É—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞."
        </blockquote>
    </div>"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–º –∫–Ω–∏–∂–Ω–æ–º —Å—Ç–∏–ª–µ
    for i, img_base64 in enumerate(processed_images):
        caption = real_captions[i] if i < len(real_captions) else f'–ú–æ–º–µ–Ω—Ç {i+1}'
        
        # –ß–µ—Ä–µ–¥—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
        if i % 2 == 0:
            # –ü–æ–ª–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ
            html += f"""
    
    <div class="page photo-page">
        <div class="photo">
            <img src="{img_base64}" alt="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {i+1}">
        </div>
        
        <div class="photo-caption">
            {caption}
        </div>
        
        <p style="margin-top: 2cm; font-style: italic; text-align: center; color: #666;">
            –ö–∞–∂–¥–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è ‚Äî —ç—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –º–æ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è. –í —ç—Ç–æ–º –∫–∞–¥—Ä–µ –∂–∏–≤–µ—Ç —á–∞—Å—Ç–∏—á–∫–∞ –¥—É—à–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç–∏–≤ –≤ –Ω–∞—à–∏ —Å–µ—Ä–¥—Ü–∞.
        </p>
    </div>"""
        else:
            # –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
            html += f"""
    
    <div class="page">
        <div class="photo-inline">
            <img src="{img_base64}" alt="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {i+1}">
            <div class="photo-caption" style="margin-top: 0.5cm; font-size: 10pt;">
                {caption}
            </div>
        </div>
        
        <p class="first-paragraph">
            <span class="drop-cap">–≠</span>—Ç–æ—Ç —Å–Ω–∏–º–æ–∫ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –±–µ–∑ —Å–ª–æ–≤. –í –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∫–∞–¥—Ä–∞ —á–∏—Ç–∞–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–º–µ–Ω—Ç–∞, –≤ –∏–≥—Ä–µ —Å–≤–µ—Ç–∞ –∏ —Ç–µ–Ω–∏ ‚Äî —ç–º–æ—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∞. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–æ—Å—Ç–æ–º –º–µ–∂–¥—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –º–∏—Ä–æ–º @{username} –∏ –Ω–∞–º–∏, –∑—Ä–∏—Ç–µ–ª—è–º–∏.
        </p>
        
        <p>
            –ò—Å–∫—É—Å—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∫–∞–º–µ—Ä—ã, –∞ –≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —É–≤–∏–¥–µ—Ç—å –Ω–µ–æ–±—ã—á–Ω–æ–µ –≤ –æ–±—ã—á–Ω–æ–º, –ø–æ–π–º–∞—Ç—å —É—Å–∫–æ–ª—å–∑–∞—é—â—É—é –∫—Ä–∞—Å–æ—Ç—É –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç–∏. –ö–∞–∂–¥—ã–π –∫–∞–¥—Ä –≤ —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ‚Äî —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ —Ç–æ–≥–æ, —á—Ç–æ –∫—Ä–∞—Å–æ—Ç–∞ –æ–∫—Ä—É–∂–∞–µ—Ç –Ω–∞—Å –≤–µ–∑–¥–µ, –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞—É—á–∏—Ç—å—Å—è –µ—ë –∑–∞–º–µ—á–∞—Ç—å.
        </p>
        
        <p>
            –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–Ω–æ–≥–æ. –≠—Ç–æ –∫–ª—é—á –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Ç–æ–≥–æ, —á—Ç–æ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª –∞–≤—Ç–æ—Ä –≤ –º–æ–º–µ–Ω—Ç —Å—ä–µ–º–∫–∏, —á—Ç–æ —Ö–æ—Ç–µ–ª –ø–µ—Ä–µ–¥–∞—Ç—å –∑—Ä–∏—Ç–µ–ª—é. –°–ª–æ–≤–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞, —Å–æ–∑–¥–∞–≤–∞—è –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è.
        </p>
    </div>"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤—ã –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö –∏ –º–µ—Å—Ç–∞—Ö
    html += f"""
    
    <!-- –ì–õ–ê–í–ê 2: –ì–ï–û–ì–†–ê–§–ò–Ø –î–£–®–ò -->
    <div class="page">
        <div class="chapter-number">–ì–ª–∞–≤–∞ –≤—Ç–æ—Ä–∞—è</div>
        <h2>–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –¥—É—à–∏</h2>
        
        <p class="first-paragraph">
            <span class="drop-cap">–ú</span>–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –≤—ã–±–∏—Ä–∞–µ–º –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é—Ç –æ –Ω–∞—Å –Ω–µ –º–µ–Ω—å—à–µ, —á–µ–º –Ω–∞—à–∏ –ª–∏—Ü–∞. –í –≥–∞–ª–µ—Ä–µ–µ @{username} –∑–∞–ø–µ—á–∞—Ç–ª–µ–Ω—ã –ª–æ–∫–∞—Ü–∏–∏, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ–µ—Ç —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –∏ –∑–Ω–∞—á–µ–Ω–∏–µ.
        </p>
        
        <p>
            {chr(10).join([f"<em>{location}</em> ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –≥–¥–µ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä –Ω–∞–ø–æ–ª–Ω–µ–Ω –æ—Å–æ–±—ã–º —Å–º—ã—Å–ª–æ–º." for location in locations[:3]])}
        </p>
        
        <p>
            –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ Instagram ‚Äî —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–º–µ–Ω–∞ –¥–µ–∫–æ—Ä–∞—Ü–∏–π. –≠—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤—ã—Ö –≥—Ä–∞–Ω–µ–π —Å–µ–±—è –≤ –Ω–æ–≤—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö. –ö–∞–∂–¥–æ–µ –º–µ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –≤ –¥—É—à–µ, –º–µ–Ω—è–µ—Ç –Ω–∞—Å, –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –º–∏—Ä –ø–æ–¥ –¥—Ä—É–≥–∏–º —É–≥–ª–æ–º.
        </p>
        
        <blockquote>
            "–ú—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ–º –Ω–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–±–µ–∂–∞—Ç—å –æ—Ç –∂–∏–∑–Ω–∏, –∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∂–∏–∑–Ω—å –Ω–µ —É–±–µ–∂–∞–ª–∞ –æ—Ç –Ω–∞—Å."
        </blockquote>
        
        <p>
            –í —ç–ø–æ—Ö—É —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ø–æ—Å–æ–±–æ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∏–¥–æ–º, –Ω–æ –∏ —á—É–≤—Å—Ç–≤–æ–º. –ß–µ—Ä–µ–∑ –∫–∞–¥—Ä –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –º–µ—Å—Ç–∞, –µ–≥–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞, —Ç–æ –Ω–µ—É–ª–æ–≤–∏–º–æ–µ –æ—â—É—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–∞–º–∏.
        </p>
    </div>

    <!-- –ì–õ–ê–í–ê 3: –Ø–ó–´–ö –≠–ú–û–¶–ò–ô -->
    <div class="page">
        <div class="chapter-number">–ì–ª–∞–≤–∞ —Ç—Ä–µ—Ç—å—è</div>
        <h2>–Ø–∑—ã–∫ —ç–º–æ—Ü–∏–π</h2>
        
        <p class="first-paragraph">
            <span class="drop-cap">–ü</span>–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –≤ Instagram ‚Äî —ç—Ç–æ –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –ø–æ—ç–∑–∏–∏. –ö—Ä–∞—Ç–∫–∏–µ, –µ–º–∫–∏–µ, –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞—é—Ç —Ü–µ–ª—É—é –≥–∞–º–º—É —á—É–≤—Å—Ç–≤ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤–∞—Ö. @{username} –≤–ª–∞–¥–µ–µ—Ç —ç—Ç–∏–º —è–∑—ã–∫–æ–º –≤ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–µ.
        </p>
        
        <p>
            –ö–∞–∂–¥–∞—è –ø–æ–¥–ø–∏—Å—å ‚Äî —ç—Ç–æ –∫–ª—é—á –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–∏—Ä–∞ –∞–≤—Ç–æ—Ä–∞. –í –Ω–∏—Ö –∑–≤—É—á–∞—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –∂–∏–∑–Ω–∏, –ª—é–±–≤–∏, –¥—Ä—É–∂–±–µ, –º–µ—á—Ç–∞—Ö. –≠—Ç–æ —á–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –º–∏—Ä–æ–º, –≥–¥–µ —ç–º–æ—Ü–∏–∏ –≤–∞–∂–Ω–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫.
        </p>
        
        <div style="margin: 2cm 0; font-style: italic; color: #666; text-align: center;">
            {chr(10).join([f'"{caption}"' for caption in real_captions[:3]])}
        </div>
        
        <p>
            –í —ç—Ç–∏—Ö —Å—Ç—Ä–æ—á–∫–∞—Ö –∂–∏–≤–µ—Ç –ø–æ—ç–∑–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ ‚Äî –∏—Å–∫—Ä–µ–Ω–Ω—è—è, –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è, –∏–¥—É—â–∞—è –æ—Ç —Å–µ—Ä–¥—Ü–∞. –û–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞—é—Ç –Ω–∞–º, —á—Ç–æ –≤ —ç–ø–æ—Ö—É —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ —ç–º–æ—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≥–ª–∞–≤–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é.
        </p>
        
        <blockquote>
            "–õ—É—á—à–∏–µ —Å–ª–æ–≤–∞ ‚Äî —Ç–µ, —á—Ç–æ –∏–¥—É—Ç –æ—Ç —Å–µ—Ä–¥—Ü–∞ –∫ —Å–µ—Ä–¥—Ü—É."
        </blockquote>
    </div>

    <!-- –§–ò–ù–ê–õ–¨–ù–ê–Ø –ì–õ–ê–í–ê -->
    <div class="page">
        <div class="chapter-number">–≠–ø–∏–ª–æ–≥</div>
        <h2>–ß—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è</h2>
        
        <p class="first-paragraph">
            <span class="drop-cap">–ö</span>–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Å–µ—Ä–≤–µ—Ä—ã Instagram –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ—é—Ç, –∞ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏—Å—á–µ–∑–Ω—É—Ç. –ù–æ —ç—Ç–∞ –∫–Ω–∏–≥–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è ‚Äî –∫–∞–∫ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏, –∫–∞–∫ —Ö—Ä–æ–Ω–∏–∫–∞ –¥—É—à–∏, –∫–∞–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Ç–æ–≥–æ, —á—Ç–æ –∫—Ä–∞—Å–æ—Ç–∞ –±—ã–ª–∞ –∑–¥–µ—Å—å.
        </p>
        
        <p>
            –ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —ç—Ç–æ–π –∫–Ω–∏–≥–∏ ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–≥–Ω–æ–≤–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –∂–∏–∑–Ω—å @{username} —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π. –í –º–∏—Ä–µ, –≥–¥–µ –≤—Å–µ —É—Å–∫–æ—Ä—è–µ—Ç—Å—è, –≥–¥–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Ä–∞—Å—Å–µ–∏–≤–∞–µ—Ç—Å—è –º–µ–∂–¥—É —Ç—ã—Å—è—á–∞–º–∏ –ø–æ—Å—Ç–æ–≤, —ç—Ç–∞ –∫–Ω–∏–≥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ –≤—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è.
        </p>
        
        <p>
            –ó–¥–µ—Å—å –Ω–µ—Ç –ª–∞–π–∫–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –Ω–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ —Ä–µ–∫–ª–∞–º—ã. –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç–∞—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è, —Ä–∞—Å—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å–≤–µ—Ç–æ–º –∏ —Å–ª–æ–≤–∞–º–∏. –ò—Å—Ç–æ—Ä–∏—è –æ —Ç–æ–º, –∫–∞–∫ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ã—á–Ω–∞—è –∂–∏–∑–Ω—å, –µ—Å–ª–∏ –Ω–∞—É—á–∏—Ç—å—Å—è –≤–∏–¥–µ—Ç—å –µ—ë –∫—Ä–∞—Å–æ—Ç—É.
        </p>
        
        <blockquote>
            "–°–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∂–∏–∑–Ω–∏ —Å–ª—É—á–∞—é—Ç—Å—è –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏."
        </blockquote>
        
        <p>
            –ü—É—Å—Ç—å —ç—Ç–∞ –∫–Ω–∏–≥–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ —Ç–æ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ–ª–æ–Ω —á—É–¥–µ—Å, –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç–æ–∏–Ω –≤–Ω–∏–º–∞–Ω–∏—è, –∫–∞–∂–¥–∞—è –∂–∏–∑–Ω—å ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∏ –±–µ—Å—Ü–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è, –∑–∞—Å–ª—É–∂–∏–≤–∞—é—â–∞—è –±—ã—Ç—å —Ä–∞—Å—Å–∫–∞–∑–∞–Ω–Ω–æ–π.
        </p>
        
        <div class="dedication" style="margin-top: 4cm;">
            <em>–ö–æ–Ω–µ—Ü –ø–µ—Ä–≤–æ–π –≥–ª–∞–≤—ã.<br>
            –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...</em>
        </div>
    </div>

    </body>
    </html>"""
    
    return html

def convert_image_to_base64(image_path: Path, max_size: tuple = (600, 400), style: str = "original") -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 —Å —á–∏—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª—è EPUB —Å—Ç–∏–ª—è"""
    try:
        if not image_path.exists():
            print(f"‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            return ""
            
        with Image.open(image_path) as img:
            print(f"üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path.name}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            img.thumbnail(max_size, Image.Resampling.LANCZOS)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–∏—Å—Ç—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è EPUB
            if style == "clean":
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                enhancer = ImageEnhance.Contrast(img)
                img = enhancer.enhance(1.05)  # –õ–µ–≥–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
                enhancer = ImageEnhance.Sharpness(img)
                img = enhancer.enhance(1.1)   # –ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
                enhancer = ImageEnhance.Color(img)
                img = enhancer.enhance(1.02)  # –û—á–µ–Ω—å –ª–µ–≥–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏
                
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            buffer = BytesIO()
            img.save(buffer, format='JPEG', quality=90, optimize=True)
            img_str = base64.b64encode(buffer.getvalue()).decode()
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è EPUB —Å—Ç–∏–ª—è")
            return f"data:image/jpeg;base64,{img_str}"
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
        return ""
