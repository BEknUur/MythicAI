import json
import base64
from io import BytesIO
from pathlib import Path
from PIL import Image, ImageFilter, ImageEnhance, ImageDraw, ImageFont
from app.services.llm_client import generate_text, analyze_photo
import markdown
import pdfkit
import qrcode
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from typing import List, Tuple

def analyze_profile_data(posts_data: list) -> dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏"""
    if not posts_data:
        return {}
    
    profile = posts_data[0]
    posts = profile.get("latestPosts", [])
    
    analysis = {
        "username": profile.get("username", "Unknown"),
        "full_name": profile.get("fullName", ""),
        "bio": profile.get("biography", ""),
        "followers": profile.get("followersCount", 0),
        "following": profile.get("followsCount", 0),
        "posts_count": len(posts),
        "verified": profile.get("verified", False),
        "profile_pic": profile.get("profilePicUrl", ""),
        "locations": [],
        "captions": [],
        "hashtags": set(),
        "mentions": set(),
        "post_details": [],
        "total_likes": 0,
        "total_comments": 0,
        "post_dates": [],
        "most_liked_post": None,
        "most_commented_post": None,
        "common_hashtags": [],
        "mentioned_users": []
    }
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞—Ö
    for post in posts:
        post_info = {
            "caption": post.get("caption", ""),
            "location": post.get("locationName", ""),
            "likes": post.get("likesCount", 0),
            "comments": post.get("commentsCount", 0),
            "type": post.get("type", ""),
            "alt": post.get("alt", ""),
            "timestamp": post.get("timestamp", ""),
            "hashtags": post.get("hashtags", []),
            "mentions": post.get("mentions", []),
            "url": post.get("url", "")
        }
        analysis["post_details"].append(post_info)
        
        # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if post.get("likesCount"):
            analysis["total_likes"] += post["likesCount"]
            if not analysis["most_liked_post"] or post["likesCount"] > analysis["most_liked_post"]["likes"]:
                analysis["most_liked_post"] = post_info
                
        if post.get("commentsCount"):
            analysis["total_comments"] += post["commentsCount"]
            if not analysis["most_commented_post"] or post["commentsCount"] > analysis["most_commented_post"]["comments"]:
                analysis["most_commented_post"] = post_info
        
        if post.get("locationName"):
            analysis["locations"].append(post["locationName"])
        
        if post.get("caption"):
            analysis["captions"].append(post["caption"])
        
        if post.get("timestamp"):
            analysis["post_dates"].append(post["timestamp"])
            
        analysis["hashtags"].update(post.get("hashtags", []))
        analysis["mentions"].update(post.get("mentions", []))
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏
    hashtag_count = {}
    for post in posts:
        for hashtag in post.get("hashtags", []):
            hashtag_count[hashtag] = hashtag_count.get(hashtag, 0) + 1
    
    analysis["common_hashtags"] = sorted(hashtag_count.items(), key=lambda x: x[1], reverse=True)[:5]
    analysis["mentioned_users"] = list(analysis["mentions"])[:10]
    
    return analysis

def create_markdown_from_content(content: dict, analysis: dict, images: list[Path]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç Markdown –≤–µ—Ä—Å–∏—é –∫–Ω–∏–≥–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ PDF"""
    
    username = analysis.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    full_name = analysis.get('full_name', username)
    followers = analysis.get('followers', 0)
    following = analysis.get('following', 0)
    posts_count = analysis.get('posts_count', 0)
    bio = analysis.get('bio', '')
    verified = analysis.get('verified', False)
    total_likes = analysis.get('total_likes', 0)
    total_comments = analysis.get('total_comments', 0)
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Instagram
    real_captions = analysis.get('captions', [])[:6]
    common_hashtags = analysis.get('common_hashtags', [])[:5]
    mentioned_users = analysis.get('mentioned_users', [])[:5]
    locations = analysis.get('locations', [])[:5]
    most_liked = analysis.get('most_liked_post')
    
    markdown_content = f"""
# {content.get('title', '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–Ω–∏–≥–∞ –æ @' + username)}

*–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å–≤—è—â–µ–Ω–∏–µ*

---

## @{username}
### {full_name}
{f'‚úì **Verified**' if verified else ''}

---

## üéØ –¶–∏—Ñ—Ä—ã –≤–æ—Å—Ö–∏—â–µ–Ω–∏—è

| –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |
|------------|----------|
| üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ | {followers:,} |
| üì± –ü–æ—Å—Ç—ã | {posts_count} |
| üë• –ü–æ–¥–ø–∏—Å–∫–∏ | {following:,} |
| ‚ù§Ô∏è –õ–∞–π–∫–∏ | {total_likes:,} |
| üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ | {total_comments:,} |

{f'> *"{bio}"*' if bio else ''}

{content.get('engagement_story', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç —Å–∞–º–∞ –∑–∞ —Å–µ–±—è...')}

---

## üí´ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ

{content.get('intro', '–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Å–ª–æ–≤–∞ –æ –≤—Å—Ç—Ä–µ—á–µ...')}

---

## üì± Instagram-–∫–Ω–∏–≥–∞

### üìù –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –∫ –ø–æ—Å—Ç–∞–º

{"".join([f'> "{caption}"\n\n' for caption in real_captions if caption])}



### üìç –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞

{chr(10).join([f'- üìç {location}' for location in locations])}

{content.get('locations_journey', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–µ—Å—Ç–∞–º...')}

### üë• –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–∑–µ–π

{" ".join([f'`@{user}`' for user in mentioned_users])}

{f'''
### üèÜ –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç

> "{most_liked.get("caption", "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏")}"

**‚ù§Ô∏è {most_liked.get("likes", 0)} –ª–∞–π–∫–æ–≤ ‚Ä¢ üí¨ {most_liked.get("comments", 0)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤**
''' if most_liked else ''}

---

## üñºÔ∏è –ì–∞–ª–µ—Ä–µ—è –º–æ–º–µ–Ω—Ç–æ–≤

{content.get('captions_analysis', '–ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–µ–π –∫ –ø–æ—Å—Ç–∞–º...')}

---

## üåü –¶–∏—Ç–∞—Ç–∞

> *"–ö—Ä–∞—Å–æ—Ç–∞ - —è–∑—ã–∫, –ø–æ–Ω—è—Ç–Ω—ã–π –≤—Å–µ–º"*
> 
> ‚Äî *–†–∞–ª—å—Ñ –≠–º–µ—Ä—Å–æ–Ω*

---

## üíù –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ

{content.get('final_message', '–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –≤–æ—Å—Ö–∏—â–µ–Ω–∏—è...')}

---

*–° –∏—Å–∫—Ä–µ–Ω–Ω–∏–º –≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ–º ‚ù§*

*–°–æ–∑–¥–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è*

‚ù¶ ‚ùß ‚ù¶
"""
    
    return markdown_content

def build_romantic_book(run_id: str, images: list[Path], texts: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∫–Ω–∏–≥–∏-–ø–æ–¥–∞—Ä–∫–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        run_dir = Path("data") / run_id
        posts_json = run_dir / "posts.json"
        images_dir = run_dir / "images"
        
        if posts_json.exists():
            posts_data = json.loads(posts_json.read_text(encoding="utf-8"))
        else:
            posts_data = []
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö
        actual_images = []
        if images_dir.exists():
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏
            for img_file in sorted(images_dir.glob("*")):
                if img_file.suffix.lower() in ['.jpg', '.jpeg', '.png', '.webp']:
                    actual_images.append(img_file)
        
        print(f"üíï –°–æ–∑–¥–∞–µ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–Ω–∏–≥—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è")
        print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {len(actual_images)} –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ {images_dir}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        analysis = analyze_profile_data(posts_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        romantic_content = generate_romantic_content(analysis, actual_images)
        
        # –°–æ–∑–¥–∞–µ–º HTML –≤ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ
        html = create_romantic_book_html(romantic_content, analysis, actual_images)
        
        # –°–æ–∑–¥–∞–µ–º Markdown –≤–µ—Ä—Å–∏—é
        markdown_content = create_markdown_from_content(romantic_content, analysis, actual_images)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
        out = Path("data") / run_id
        out.mkdir(parents=True, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
        html_file = out / "book.html"
        html_file.write_text(html, encoding="utf-8")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Markdown —Ñ–∞–π–ª
        markdown_file = out / "book.md"
        markdown_file.write_text(markdown_content, encoding="utf-8")
        
        # –°–æ–∑–¥–∞–µ–º PDF —á–µ—Ä–µ–∑ Markdown ‚Üí HTML ‚Üí PDF
        try:
            print("üìÑ –°–æ–∑–¥–∞–µ–º PDF —á–µ—Ä–µ–∑ Markdown...")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML —Å –∫—Ä–∞—Å–∏–≤—ã–º —Å—Ç–∏–ª–µ–º
            markdown_html = markdown.markdown(markdown_content, extensions=['tables', 'toc'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è PDF
            styled_html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>–ö–Ω–∏–≥–∞ @{analysis.get("username", "")}</title>
                <style>
                    body {{
                        font-family: 'Crimson Text', serif;
                        line-height: 1.8;
                        color: #1a1a1a;
                        background: white;
                        margin: 0;
                        padding: 40px;
                        max-width: 800px;
                        margin: 0 auto;
                    }}
                    
                    h1 {{
                        font-family: 'Playfair Display', serif;
                        font-size: 2.5em;
                        color: #1a1a1a;
                        text-align: center;
                        margin-bottom: 10px;
                    }}
                    
                    h2 {{
                        font-family: 'Playfair Display', serif;
                        font-size: 2em;
                        color: #1a1a1a;
                        border-bottom: 2px solid #666666;
                        padding-bottom: 10px;
                        margin-top: 40px;
                    }}
                    
                    h3 {{
                        font-family: 'Playfair Display', serif;
                        font-size: 1.4em;
                        color: #1a1a1a;
                        margin-top: 30px;
                    }}
                    
                    p {{
                        font-size: 12pt;
                        text-align: justify;
                        margin-bottom: 15px;
                        text-indent: 1.5em;
                    }}
                    
                    blockquote {{
                        background: #f8f9fa;
                        border-left: 4px solid #666666;
                        padding: 15px 20px;
                        margin: 20px 0;
                        font-style: italic;
                        border-radius: 5px;
                    }}
                    
                    table {{
                        width: 100%;
                        border-collapse: collapse;
                        margin: 20px 0;
                        background: white;
                        border-radius: 8px;
                        overflow: hidden;
                    }}
                    
                    th, td {{
                        padding: 12px;
                        text-align: left;
                        border-bottom: 1px solid #e9ecef;
                    }}
                    
                    th {{
                        background: #1a1a1a;
                        color: white;
                        font-weight: 600;
                    }}
                    
                    code {{
                        background: #1a1a1a;
                        color: white;
                        padding: 3px 8px;
                        border-radius: 12px;
                        font-size: 0.9em;
                        margin: 2px;
                        display: inline-block;
                    }}
                </style>
            </head>
            <body>
                {markdown_html}
            </body>
            </html>
            """
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –≤–µ—Ä—Å–∏—é –¥–ª—è PDF
            pdf_html_file = out / "book_for_pdf.html"
            pdf_html_file.write_text(styled_html, encoding="utf-8")
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è wkhtmltopdf
            options = {
                'page-size': 'A4',
                'margin-top': '1.5cm',
                'margin-right': '1.5cm',
                'margin-bottom': '1.5cm',
                'margin-left': '1.5cm',
                'encoding': "UTF-8",
                'no-outline': None,
                'enable-local-file-access': None,
                'print-media-type': None,
                'disable-smart-shrinking': None,
                'header-center': f'Instagram –∫–Ω–∏–≥–∞ @{analysis.get("username", "")}',
                'header-font-size': '10',
                'header-spacing': '10',
                'footer-center': '[page] –∏–∑ [topage]',
                'footer-font-size': '10',
                'footer-spacing': '10'
            }
            
            # –°–æ–∑–¥–∞–µ–º PDF
            pdfkit.from_file(str(pdf_html_file), str(out / "book.pdf"), options=options)
            
            print(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∫–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞!")
            print(f"üìÑ PDF –≤–µ—Ä—Å–∏—è: {out / 'book.pdf'}")
            print(f"üìù Markdown –≤–µ—Ä—Å–∏—è: {out / 'book.md'}")
            print(f"üìñ HTML –≤–µ—Ä—Å–∏—è: {out / 'book.html'}")
            
        except Exception as pdf_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {pdf_error}")
            print(f"üìñ –î–æ—Å—Ç—É–ø–Ω—ã Markdown –∏ HTML –≤–µ—Ä—Å–∏–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–∏–≥–∏: {e}")
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        try:
            basic_html = f"""
            <html>
            <head>
                <title>–ö–Ω–∏–≥–∞</title>
                <style>
                    body {{ background: white; font-family: serif; padding: 20px; }}
                    .error {{ background: #f8f9fa; padding: 20px; border-radius: 10px; text-align: center; }}
                </style>
            </head>
            <body>
                <div class="error">
                    <h1>üìñ –ö–Ω–∏–≥–∞</h1>
                    <p>–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–∏–≥–∏: {e}</p>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ</p>
                </div>
            </body>
            </html>
            """
            out = Path("data") / run_id
            out.mkdir(parents=True, exist_ok=True)
            
            html_file = out / "book.html"
            html_file.write_text(basic_html, encoding="utf-8")
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {out / 'book.html'}")
            
        except Exception as final_error:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {final_error}")

def apply_dream_pastel_effect(img: Image.Image) -> Image.Image:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç Dream-Pastel –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–µ
        if img is None or img.size[0] == 0 or img.size[1] == 0:
            print("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return img
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if img.mode != 'RGB':
            img = img.convert('RGB')
        
        # –õ—ë–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ
        img = img.filter(ImageFilter.GaussianBlur(1.2))
        
        # –¶–≤–µ—Ç–æ–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤ —Ç–µ–ø–ª—ã–µ —Ç–æ–Ω–∞
        enhancer = ImageEnhance.Color(img)
        img = enhancer.enhance(1.15)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª—ã–π overlay
        overlay = Image.new('RGBA', img.size, (255, 220, 210, 25))  # peach #ffdcd2
        img = img.convert('RGBA')
        img = Image.alpha_composite(img, overlay)
        
        # –î–æ–±–∞–≤–ª—è–µ–º grain (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        try:
            noise = np.random.randint(0, 15, (img.size[1], img.size[0], 3), dtype=np.uint8)
            noise_img = Image.fromarray(noise, 'RGB').convert('RGBA')
            noise_overlay = Image.new('RGBA', img.size, (0, 0, 0, 0))
            noise_overlay.paste(noise_img, (0, 0))
            img = Image.alpha_composite(img, noise_overlay)
        except Exception as noise_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à—É–º–∞: {noise_error}")
        
        # –õ–µ–≥–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏
        enhancer = ImageEnhance.Brightness(img)
        img = enhancer.enhance(1.05)
        
        return img.convert('RGB')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ Dream-Pastel —ç—Ñ—Ñ–µ–∫—Ç–∞: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            return img.convert('RGB') if img.mode != 'RGB' else img
        except:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
            placeholder = Image.new('RGB', (400, 300), (240, 240, 240))
            return placeholder

def create_collage_spread(img1: Image.Image, img2: Image.Image, caption: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–∞–∂-—Ä–∞–∑–≤–æ—Ä–æ—Ç –∏–∑ –¥–≤—É—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if img1 is None or img2 is None:
            print("‚ùå –û–¥–Ω–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–ª–ª–∞–∂–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return ""
            
        if img1.size[0] == 0 or img1.size[1] == 0 or img2.size[0] == 0 or img2.size[1] == 0:
            print("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–ª–ª–∞–∂–∞")
            return ""
        
        # –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç –¥–ª—è –∫–æ–ª–ª–∞–∂–∞
        canvas_width = 1200
        canvas_height = 800
        canvas = Image.new('RGB', (canvas_width, canvas_height), (255, 250, 245))
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img1_size = (500, 350)
        img2_size = (500, 350)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        try:
            img1 = img1.resize(img1_size, Image.Resampling.LANCZOS)
            img2 = img2.resize(img2_size, Image.Resampling.LANCZOS)
        except Exception as resize_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞: {resize_error}")
            return ""
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º dream-pastel —ç—Ñ—Ñ–µ–∫—Ç
        img1 = apply_dream_pastel_effect(img1)
        img2 = apply_dream_pastel_effect(img2)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º –ø–æ–≤–æ—Ä–æ—Ç–æ–º
        try:
            img1_rotated = img1.rotate(-2, expand=True, fillcolor=(255, 250, 245))
            img2_rotated = img2.rotate(3, expand=True, fillcolor=(255, 250, 245))
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –Ω–∞ —Ö–æ–ª—Å—Ç–µ
            pos1 = (50, 150)
            pos2 = (650, 200)
            
            canvas.paste(img1_rotated, pos1)
            canvas.paste(img2_rotated, pos2)
        except Exception as rotation_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {rotation_error}")
            # –†–∞–∑–º–µ—â–∞–µ–º –±–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞
            canvas.paste(img1, (50, 150))
            canvas.paste(img2, (650, 200))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
        try:
            draw = ImageDraw.Draw(canvas)
            try:
                font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 24)
            except:
                font = ImageFont.load_default()
            
            # –¢–µ–∫—Å—Ç —Å —Ç–µ–Ω—å—é
            text_x = canvas_width // 2
            text_y = canvas_height - 100
            
            # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π caption
            if len(caption) > 50:
                caption = caption[:47] + "..."
            
            # –¢–µ–Ω—å
            draw.text((text_x + 2, text_y + 2), caption, font=font, fill=(0, 0, 0, 100), anchor="mm")
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            draw.text((text_x, text_y), caption, font=font, fill=(80, 60, 40), anchor="mm")
        except Exception as text_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {text_error}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        buffer = BytesIO()
        canvas.save(buffer, format='JPEG', quality=92)
        img_str = base64.b64encode(buffer.getvalue()).decode()
        return f"data:image/jpeg;base64,{img_str}"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–∞–∂–∞: {e}")
        return ""

def create_infographic(analysis: dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    try:
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))
        fig.patch.set_facecolor('#fff5f0')
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        months = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω']
        likes_growth = [100, 150, 220, 380, 520, analysis.get('total_likes', 600)]
        
        ax1.plot(months, likes_growth, color='#ff6b9d', linewidth=3, marker='o', markersize=8)
        ax1.fill_between(months, likes_growth, alpha=0.3, color='#ffb3d1')
        ax1.set_title('–†–æ—Å—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏', fontsize=14, color='#8b5a5a')
        ax1.set_ylabel('–õ–∞–π–∫–∏', color='#8b5a5a')
        ax1.grid(True, alpha=0.3)
        
        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ Followers/Following
        followers = analysis.get('followers', 1000)
        following = analysis.get('following', 500)
        sizes = [followers, following]
        labels = ['–ü–æ–¥–ø–∏—Å—á–∏–∫–∏', '–ü–æ–¥–ø–∏—Å–∫–∏']
        colors = ['#ff6b9d', '#ffd93d']
        
        ax2.pie(sizes, labels=labels, colors=colors, autopct='%1.0f', startangle=90)
        ax2.set_title('–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫', fontsize=14, color='#8b5a5a')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ base64
        buffer = BytesIO()
        plt.savefig(buffer, format='PNG', dpi=150, bbox_inches='tight', facecolor='#fff5f0')
        plt.close()
        
        img_str = base64.b64encode(buffer.getvalue()).decode()
        return f"data:image/png;base64,{img_str}"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏: {e}")
        return ""

def generate_playlist_for_photo(caption: str, index: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    mood_tracks = {
        0: "Lana Del Rey - Young and Beautiful",
        1: "The 1975 - Somebody Else", 
        2: "Billie Eilish - lovely",
        3: "Clairo - Pretty Girl",
        4: "Rex Orange County - Best Friend",
        5: "Boy Pablo - Everytime",
        6: "Cuco - Lo Que Siento",
        7: "Mac DeMarco - Chamber of Reflection"
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è (—Å fallback)
    try:
        prompt = f"""–ü–æ–¥–±–µ—Ä–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π dreampop/indie-—Ç—Ä–µ–∫ –∫ –æ–ø–∏—Å–∞–Ω–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: "{caption[:100]}..."
        
        –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞"
        –°—Ç–∏–ª—å: –º–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π, –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Å–æ–∑–µ—Ä—Ü–∞–Ω–∏—è —Ñ–æ—Ç–æ.
        """
        
        suggested_track = generate_text(prompt, max_tokens=50)
        if suggested_track and len(suggested_track.strip()) > 5:
            return suggested_track.strip()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
    
    return mood_tracks.get(index % len(mood_tracks), "Dream Valley - Sunset Memories")

def create_qr_code(username: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∞—Ä—Ö–∏–≤"""
    try:
        # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ —Å —Å—Å—ã–ª–∫–æ–π
        qr_url = f"https://instagram.com/{username}"
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(qr_url)
        qr.make(fit=True)
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞
        qr_img = qr.make_image(fill_color="black", back_color="white")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        buffer = BytesIO()
        qr_img.save(buffer, format='PNG')
        img_str = base64.b64encode(buffer.getvalue()).decode()
        return f"data:image/png;base64,{img_str}"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞: {e}")
        return ""

def format_statistics_creatively(stat_name: str, value: int) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    creative_formats = {
        'followers': f"{value:,} —Å–µ—Ä–¥–µ—Ü –≤ –∑—Ä–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–ª–µ",
        'following': f"{value:,} –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏—Ö –≥–æ–ª–æ—Å–æ–≤",
        'posts': f"{value} –∫–∞–¥—Ä–æ–≤ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞", 
        'likes': f"{value:,} –º–æ–º–µ–Ω—Ç–æ–≤ —Å—á–∞—Å—Ç—å—è",
        'comments': f"{value:,} –∏—Å–∫—Ä–µ–Ω–Ω–∏—Ö —Å–ª–æ–≤",
        'stories': f"{value} –º–≥–Ω–æ–≤–µ–Ω–∏–π –¥—É—à–∏"
    }
    return creative_formats.get(stat_name, f"{value:,}")

def add_text_rhythm(text: str) -> str:
    """–£–ª—É—á—à–∞–µ—Ç —Ä–∏—Ç–º —Ç–µ–∫—Å—Ç–∞, —á–µ—Ä–µ–¥—É—è –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    sentences = text.split('. ')
    improved_sentences = []
    
    for i, sentence in enumerate(sentences):
        # –ö–∞–∂–¥–æ–µ 3-–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–ª–∞–µ–º —Ü–∏—Ç–∞—Ç–æ–π
        if i > 0 and i % 3 == 0 and len(sentence) > 30:
            improved_sentences.append(f'<blockquote>"{sentence.strip()}."</blockquote>')
        else:
            improved_sentences.append(sentence.strip() + '.')
    
    return ' '.join(improved_sentences)

def add_english_voiceover(text: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ voice-over —Ñ—Ä–∞–∑—ã"""
    voiceover_phrases = [
        "*moment of truth*",
        "*pure magic*", 
        "*breathe it in*",
        "*frame perfect*",
        "*golden hour*",
        "*soul deep*",
        "*simply beautiful*",
        "*life in motion*"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º voice-over –≤ –∫–æ–Ω–µ—Ü –∫–∞–∂–¥–æ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ –∞–±–∑–∞—Ü–∞
    if len(text) > 100:
        import random
        phrase = random.choice(voiceover_phrases)
        return f"{text} <em class='voiceover'>{phrase}</em>"
    return text

def generate_romantic_content(analysis: dict, images: list[Path]) -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö Instagram —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    username = analysis.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    full_name = analysis.get('full_name', username)
    bio = analysis.get('bio', '')
    followers = max(0, analysis.get('followers', 0))
    following = max(0, analysis.get('following', 0))
    posts_count = max(0, analysis.get('posts_count', 0))
    total_likes = max(0, analysis.get('total_likes', 0))
    total_comments = max(0, analysis.get('total_comments', 0))
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Instagram —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    real_captions = analysis.get('captions', [])[:10] if analysis.get('captions') else ['–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –º–æ–º–µ–Ω—Ç –∂–∏–∑–Ω–∏']
    common_hashtags = analysis.get('common_hashtags', [])[:5] if analysis.get('common_hashtags') else [('beautiful', 1), ('life', 1)]
    mentioned_users = analysis.get('mentioned_users', [])[:5] if analysis.get('mentioned_users') else []
    locations = analysis.get('locations', [])[:5] if analysis.get('locations') else ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ']
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–º–æ—â—å—é OpenAI Vision
    photo_analyses = []
    context = f"Instagram –ø—Ä–æ—Ñ–∏–ª—å @{username}, –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {followers}, –±–∏–æ: {bio}"
    
    for i, img_path in enumerate(images[:6]):
        if img_path.exists():
            try:
                analysis_text = analyze_photo(img_path, context)
                photo_analyses.append(analysis_text)
                print(f"üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ {i+1}: {analysis_text[:100]}...")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ {img_path}: {e}")
                photo_analyses.append("–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –º–æ–º–µ–Ω—Ç, –ø–æ–ª–Ω—ã–π —ç–º–æ—Ü–∏–π –∏ –∫—Ä–∞—Å–æ—Ç—ã")
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã
    data_for_chapters = {
        'username': username,
        'full_name': full_name,
        'bio': bio,
        'followers': followers,
        'posts_count': posts_count,
        'captions': real_captions,
        'locations': locations,
        'mentioned_users': mentioned_users,
        'total_likes': total_likes,
        'photo_analyses': photo_analyses
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é OpenAI
    from app.services.llm_client import generate_unique_chapter
    
    content = {}
    generated_texts = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    
    # –ü—Ä–æ–ª–æ–≥
    print(f"üíï –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–ª–æ–≥...")
    try:
        prologue = generate_unique_chapter("intro", data_for_chapters, generated_texts)
        content['prologue'] = prologue
        generated_texts.append(prologue[:200])  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–ª–æ–≥–∞: {e}")
        content['prologue'] = f"–í –º–∏—Ä–µ –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π @{username} —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ—é –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—É—é –∏—Å—Ç–æ—Ä–∏—é. –ö–∞–∂–¥—ã–π –ø–æ—Å—Ç –∑–¥–µ—Å—å ‚Äî —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞, –Ω–∞–ø–∏—Å–∞–Ω–Ω–∞—è —Å–≤–µ—Ç–æ–º –∏ —ç–º–æ—Ü–∏—è–º–∏."
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    content['title'] = f"–í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–æ—ç–∑–∏—è @{username}"
    
    # –ì–ª–∞–≤–∞ –æ–± —ç–º–æ—Ü–∏—è—Ö  
    print(f"üíï –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤—É –æ–± —ç–º–æ—Ü–∏—è—Ö...")
    try:
        emotions_chapter = generate_unique_chapter("emotions", data_for_chapters, generated_texts)
        content['emotions'] = emotions_chapter
        generated_texts.append(emotions_chapter[:200])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–ª–∞–≤—ã –æ–± —ç–º–æ—Ü–∏—è—Ö: {e}")
        content['emotions'] = f"–í –ø–æ–¥–ø–∏—Å—è—Ö @{username} –∂–∏–≤–µ—Ç –æ—Å–æ–±—ã–π —è–∑—ã–∫ —á—É–≤—Å—Ç–≤. –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤—ã–±—Ä–∞–Ω–æ —Å –∑–∞–±–æ—Ç–æ–π, –∫–∞–∂–¥–∞—è —Ñ—Ä–∞–∑–∞ ‚Äî —ç—Ç–æ –º–æ—Å—Ç–∏–∫ –º–µ–∂–¥—É —Å–µ—Ä–¥—Ü–∞–º–∏."
    
    # –ì–ª–∞–≤–∞ –æ –º–µ—Å—Ç–∞—Ö
    print(f"üíï –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤—É –æ –º–µ—Å—Ç–∞—Ö...")
    try:
        places_chapter = generate_unique_chapter("places", data_for_chapters, generated_texts)
        content['places'] = places_chapter
        generated_texts.append(places_chapter[:200])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–ª–∞–≤—ã –æ –º–µ—Å—Ç–∞—Ö: {e}")
        content['places'] = f"–ö–∞—Ä—Ç–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π @{username} —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Å–æ—Ç—ã –≤ —Å–∞–º—ã—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —É–≥–æ–ª–∫–∞—Ö –º–∏—Ä–∞."
    
    # –ì–ª–∞–≤–∞ –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
    print(f"üíï –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤—É –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ...")
    try:
        community_chapter = generate_unique_chapter("community", data_for_chapters, generated_texts)
        content['community'] = community_chapter
        generated_texts.append(community_chapter[:200])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–ª–∞–≤—ã –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ: {e}")
        content['community'] = f"–í–æ–∫—Ä—É–≥ @{username} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ—Å—å –æ—Å–æ–±–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ ‚Äî {format_statistics_creatively('followers', followers)} –ª—é–¥–µ–π, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ª—é–±–æ–≤—å—é –∫ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º—É."
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –≥–ª–∞–≤–∞
    print(f"üíï –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≥–ª–∞–≤—É...")
    try:
        legacy_chapter = generate_unique_chapter("legacy", data_for_chapters, generated_texts)
        content['legacy'] = legacy_chapter
        generated_texts.append(legacy_chapter[:200])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≥–ª–∞–≤—ã: {e}")
        content['legacy'] = f"–ò—Å—Ç–æ—Ä–∏—è @{username} ‚Äî —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∫—Ä–∞—Å–æ—Ç–∞ –∂–∏–≤–µ—Ç —Ä—è–¥–æ–º —Å –Ω–∞–º–∏. –ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞—É—á–∏—Ç—å—Å—è –µ—ë –≤–∏–¥–µ—Ç—å –∏ —Ü–µ–Ω–∏—Ç—å."
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    content['photo_stories'] = photo_analyses
    
    return content

def create_romantic_book_html(content: dict, analysis: dict, images: list[Path]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç HTML –∫–Ω–∏–≥—É —Å –≤–∞–Ω–∏–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    
    username = analysis.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    full_name = analysis.get('full_name', username)
    followers = analysis.get('followers', 0)
    following = analysis.get('following', 0)
    posts_count = analysis.get('posts_count', 0)
    bio = analysis.get('bio', '')
    verified = analysis.get('verified', False)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–µ–π
    processed_images = []
    
    for i, img_path in enumerate(images[:8]):
        if img_path.exists():
            try:
                with Image.open(img_path) as img:
                    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è user-friendly –≤–∏–¥–∞
                    if img.mode != 'RGB':
                        img = img.convert('RGB')
                    
                    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    max_size = (900, 700)
                    img.thumbnail(max_size, Image.Resampling.LANCZOS)
                    
                    # –ú—è–≥–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –≤–∏–¥–∞
                    enhancer = ImageEnhance.Contrast(img)
                    img = enhancer.enhance(1.08)
                    
                    enhancer = ImageEnhance.Brightness(img)
                    img = enhancer.enhance(1.02)
                    
                    enhancer = ImageEnhance.Color(img)
                    img = enhancer.enhance(1.05)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                    buffer = BytesIO()
                    img.save(buffer, format='JPEG', quality=92)
                    img_str = base64.b64encode(buffer.getvalue()).decode()
                    processed_images.append(f"data:image/jpeg;base64,{img_str}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_path}: {e}")
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    real_captions = analysis.get('captions', ['–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –º–æ–º–µ–Ω—Ç'])[:6]
    locations = analysis.get('locations', ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ'])[:5]
    photo_stories = content.get('photo_stories', [])
    
    # HTML —Å –≤–∞–Ω–∏–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    html = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>{content.get('title', f'–í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–æ—ç–∑–∏—è @{username}')}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Playfair+Display:wght@400;500;700&family=Libre+Baskerville:ital,wght@0,400;0,700;1,400&display=swap" rel="stylesheet">
    
    <style>
    :root {{
        --vanilla-bg: #faf8f3;
        --cream-bg: #f7f4ed;
        --soft-beige: #f2ede2;
        --warm-white: #fefcf8;
        --text-dark: #2c2a26;
        --text-medium: #5a5652;
        --text-light: #8b8680;
        --accent-warm: #d4af8c;
        --shadow-soft: rgba(60, 50, 40, 0.08);
    }}
    
    body {{
        font-family: 'Crimson Text', serif;
        font-size: 13pt;
        line-height: 1.7;
        color: var(--text-dark);
        background: var(--vanilla-bg);
        margin: 0;
        padding: 0;
        max-width: 850px;
        margin: 0 auto;
        background-image: 
            radial-gradient(circle at 80% 20%, var(--cream-bg) 0%, transparent 50%),
            radial-gradient(circle at 20% 80%, var(--soft-beige) 0%, transparent 50%);
    }}
    
    .page {{
        min-height: 90vh;
        padding: 2.5cm 3cm;
        margin-bottom: 1.5cm;
        page-break-after: always;
        background: var(--warm-white);
        box-shadow: 0 6px 25px var(--shadow-soft);
        border-radius: 8px;
        position: relative;
        border: 1px solid rgba(212, 175, 140, 0.1);
    }}
    
    .page::before {{
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, var(--accent-warm), transparent, var(--accent-warm));
        border-radius: 8px 8px 0 0;
    }}
    
    .page:last-child {{
        page-break-after: auto;
    }}
    
    h1 {{
        font-family: 'Playfair Display', serif;
        font-size: 32pt;
        text-align: center;
        margin: 3cm 0 2cm 0;
        color: var(--text-dark);
        font-weight: 500;
        letter-spacing: 2px;
        line-height: 1.3;
    }}
    
    h2 {{
        font-family: 'Playfair Display', serif;
        font-size: 22pt;
        color: var(--text-dark);
        margin: 2.5cm 0 1.5cm 0;
        text-align: left;
        font-weight: 500;
        border-bottom: 2px solid var(--accent-warm);
        padding-bottom: 0.5cm;
    }}
    
    h3 {{
        font-family: 'Libre Baskerville', serif;
        font-size: 16pt;
        color: var(--text-medium);
        margin: 1.5cm 0 1cm 0;
        font-weight: 400;
    }}
    
    .chapter-number {{
        font-family: 'Libre Baskerville', serif;
        font-size: 12pt;
        color: var(--text-light);
        text-align: center;
        margin-bottom: 1cm;
        font-style: italic;
        text-transform: uppercase;
        letter-spacing: 3px;
    }}
    
    p {{
        margin: 0 0 1.4em 0;
        text-align: justify;
        text-indent: 2.5em;
    }}
    
    .first-paragraph {{
        text-indent: 0;
        font-size: 14pt;
        font-weight: 500;
    }}
    
    .drop-cap {{
        float: left;
        font-family: 'Playfair Display', serif;
        font-size: 80pt;
        line-height: 65pt;
        padding-right: 12pt;
        margin-top: 8pt;
        color: var(--accent-warm);
        text-shadow: 2px 2px 4px var(--shadow-soft);
    }}
    
    blockquote {{
        font-style: italic;
        margin: 2.5em 2em;
        padding: 1.5em 2em;
        border: none;
        text-align: center;
        font-size: 12pt;
        color: var(--text-medium);
        background: var(--cream-bg);
        border-radius: 12px;
        border-left: 4px solid var(--accent-warm);
        box-shadow: 0 4px 15px var(--shadow-soft);
    }}
    
    .quote-author {{
        text-align: right;
        margin-top: 1em;
        font-size: 11pt;
        color: var(--text-light);
        font-style: normal;
    }}
    
    .photo-container {{
        margin: 2.5cm 0;
        text-align: center;
        page-break-inside: avoid;
    }}
    
    .photo-frame {{
        display: inline-block;
        padding: 20px;
        background: var(--warm-white);
        border-radius: 16px;
        box-shadow: 
            0 8px 32px var(--shadow-soft),
            inset 0 1px 0 rgba(255, 255, 255, 0.8);
        border: 1px solid rgba(212, 175, 140, 0.2);
        margin: 1cm 0;
    }}
    
    .photo-frame img {{
        max-width: 100%;
        max-height: 500px;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(60, 50, 40, 0.15);
        border: 3px solid var(--warm-white);
    }}
    
    .photo-caption {{
        font-family: 'Libre Baskerville', serif;
        font-style: italic;
        font-size: 12pt;
        color: var(--text-medium);
        margin-top: 1.5cm;
        text-align: center;
        line-height: 1.5;
    }}
    
    .photo-story {{
        margin-top: 1cm;
        padding: 1.5em;
        background: var(--soft-beige);
        border-radius: 12px;
        font-size: 11pt;
        color: var(--text-medium);
        border-left: 3px solid var(--accent-warm);
    }}
    
    .photo-inline {{
        float: right;
        margin: 0 0 1.5em 2.5em;
        width: 320px;
    }}
    
    .photo-inline .photo-frame {{
        padding: 15px;
        margin: 0;
    }}
    
    .photo-inline img {{
        width: 100%;
        max-height: 280px;
        object-fit: cover;
    }}
    
    .stats-elegant {{
        margin: 2cm 0;
        text-align: center;
        font-family: 'Libre Baskerville', serif;
        padding: 2em;
        background: var(--cream-bg);
        border-radius: 16px;
        border: 1px solid rgba(212, 175, 140, 0.2);
        box-shadow: 0 6px 20px var(--shadow-soft);
    }}
    
    .stats-elegant h3 {{
        margin-top: 0;
        color: var(--accent-warm);
        font-size: 18pt;
    }}
    
    .stats-elegant p {{
        margin: 0.5em 0;
        font-size: 12pt;
        color: var(--text-medium);
        text-indent: 0;
    }}
    
    .dedication {{
        text-align: center;
        font-style: italic;
        margin: 4cm 0;
        font-size: 14pt;
        color: var(--text-medium);
        padding: 2em;
        background: var(--soft-beige);
        border-radius: 16px;
        border: 1px solid rgba(212, 175, 140, 0.15);
    }}
    
    .captions-showcase {{
        margin: 2cm 0;
        padding: 2em;
        background: var(--warm-white);
        border-radius: 16px;
        border-left: 5px solid var(--accent-warm);
        box-shadow: 0 6px 20px var(--shadow-soft);
    }}
    
    .caption-item {{
        margin: 1.5em 0;
        padding: 1em 1.5em;
        background: var(--cream-bg);
        border-radius: 8px;
        font-style: italic;
        color: var(--text-medium);
        border-left: 3px solid var(--accent-warm);
    }}
    
    @media print {{
        body {{
            margin: 0;
            padding: 0;
            background: white;
        }}
        .page {{
            page-break-after: always;
            margin: 0;
            box-shadow: none;
            border-radius: 0;
            border: none;
        }}
        .page::before {{
            display: none;
        }}
    }}
    </style>
</head>
<body>

<!-- –û–ë–õ–û–ñ–ö–ê -->
<div class="page">
    <h1>{content.get('title', f'–í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–æ—ç–∑–∏—è @{username}')}</h1>
    
    <div class="dedication">
        –ö–∞–∂–¥—ã–π —Å–Ω–∏–º–æ–∫ ‚Äî —ç—Ç–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ,<br>
        –∫–∞–∂–¥–∞—è –ø–æ–¥–ø–∏—Å—å ‚Äî —Å—Ç—Ä–æ—á–∫–∞ –≤ –±–æ–ª—å—à–æ–π –∫–Ω–∏–≥–µ –∂–∏–∑–Ω–∏
    </div>
    
    <div style="position: absolute; bottom: 3cm; left: 50%; transform: translateX(-50%); text-align: center;">
        <p style="font-family: 'Libre Baskerville', serif; font-size: 12pt; color: var(--text-light); margin: 0;">
            –ê–≤—Ç–æ—Ä: {full_name if full_name != username else username}<br>
            <small style="font-size: 10pt;">Instagram Story Book</small>
        </p>
    </div>
</div>

<!-- –ü–†–û–õ–û–ì -->
<div class="page">
    <div class="chapter-number">–ü—Ä–æ–ª–æ–≥</div>
    <h2>–¶–∏—Ñ—Ä–æ–≤–∞—è –ø–æ—ç–∑–∏—è</h2>
    
    <p class="first-paragraph">
        <span class="drop-cap">–í</span>–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ Instagram –ø—Ä–æ—Ñ–∏–ª—è —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è. –ó–∞ –ø—Ä–∏–≤—ã—á–Ω—ã–º–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–¥—Ä–∞–º–∏ –∂–∏–≤—É—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ —ç–º–æ—Ü–∏–∏, –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –∏ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞.
    </p>
    
    <p>
        {content.get('prologue', f'@{username} —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ—ç–∑–∏—é. –ö–∞–∂–¥—ã–π –ø–æ—Å—Ç –∑–¥–µ—Å—å ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –∞ –≥–ª–∞–≤–∞ –≤ –±–æ–ª—å—à–æ–π –∫–Ω–∏–≥–µ –∂–∏–∑–Ω–∏, –Ω–∞–ø–∏—Å–∞–Ω–Ω–∞—è —Å–≤–µ—Ç–æ–º, —Ü–≤–µ—Ç–æ–º –∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.')}
    </p>
    
    <blockquote>
        "–õ—É—á—à–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –Ω–µ —Å–ª–æ–≤–∞–º–∏, –∞ –º–æ–º–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —É—Å–ø–µ–≤–∞–µ–º –∑–∞–º–µ—Ç–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å."
        <div class="quote-author">‚Äî –§–∏–ª–æ—Å–æ—Ñ–∏—è Instagram</div>
    </blockquote>
</div>

<!-- –ü–û–†–¢–†–ï–¢ –ê–í–¢–û–†–ê -->
<div class="page">
    <div class="chapter-number">–ì–ª–∞–≤–∞ –ø–µ—Ä–≤–∞—è</div>
    <h2>–ê–≤—Ç–æ—Ä –≤ –∫–∞–¥—Ä–µ</h2>
    
    <p class="first-paragraph">
        <span class="drop-cap">@</span>{username} ‚Äî —ç—Ç–æ –±–æ–ª—å—à–µ —á–µ–º –ø—Ä–æ—Å—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞ —ç—Ç–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ —Å—Ç–æ–∏—Ç {full_name if full_name != username else '—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å'}, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∏—Ç—Å—è —Å –º–∏—Ä–æ–º —Å–≤–æ–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤–∑–≥–ª—è–¥–æ–º –Ω–∞ –∫—Ä–∞—Å–æ—Ç—É.
    </p>
    
    <div class="stats-elegant">
        <h3>–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç</h3>
        <p><strong>{format_statistics_creatively('followers', followers)}</strong></p>
        <p><strong>{format_statistics_creatively('posts', posts_count)}</strong></p>
        <p>{f'‚úì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç' if verified else '–ê—É—Ç–µ–Ω—Ç–∏—á–Ω—ã–π –≥–æ–ª–æ—Å'}</p>
    </div>
    
    <p>
        {bio if bio else '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –º–æ–∂–µ—Ç –º–æ–ª—á–∞—Ç—å, –Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–æ–≤–æ—Ä—è—Ç –≥—Ä–æ–º—á–µ —Å–ª–æ–≤. –í –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ —á–∏—Ç–∞–µ—Ç—Å—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∞–≤—Ç–æ—Ä–∞, –µ–≥–æ –≤–∏–¥–µ–Ω–∏–µ –º–∏—Ä–∞ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—å –∫—Ä–∞—Å–æ—Ç—É –≤ —Å–∞–º—ã—Ö –æ–±—ã—á–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö.'}
    </p>
    
    <blockquote>
        "–ß–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç–∏–≤ –∫–∞–º–µ—Ä—ã –º—ã –ø–æ–∑–Ω–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –º–∏—Ä, –Ω–æ –∏ —Å–∞–º–∏—Ö —Å–µ–±—è."
    </blockquote>
</div>"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º
    for i, img_base64 in enumerate(processed_images):
        caption = real_captions[i] if i < len(real_captions) else f'–ú–æ–º–µ–Ω—Ç {i+1}'
        photo_analysis = photo_stories[i] if i < len(photo_stories) else "–≠—Ç–æ—Ç —Å–Ω–∏–º–æ–∫ –ø–µ—Ä–µ–¥–∞–µ—Ç –æ—Å–æ–±—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–º–µ–Ω—Ç–∞."
        
        # –ß–µ—Ä–µ–¥—É–µ–º –ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
        if i % 3 == 0:
            # –ü–æ–ª–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ
            html += f"""

<div class="page">
    <div class="photo-container">
        <div class="photo-frame">
            <img src="{img_base64}" alt="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {i+1}">
        </div>
        
        <div class="photo-caption">
            "{caption}"
        </div>
        
        <div class="photo-story">
            {photo_analysis}
        </div>
    </div>
</div>"""
        else:
            # –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
            html += f"""

<div class="page">
    <div class="photo-inline">
        <div class="photo-frame">
            <img src="{img_base64}" alt="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {i+1}">
        </div>
        <div class="photo-caption" style="margin-top: 0.8cm; font-size: 10pt;">
            "{caption}"
        </div>
    </div>
    
    <p class="first-paragraph">
        <span class="drop-cap">–ö</span>–∞–∂–¥–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é. –í —ç—Ç–æ–º –∫–∞–¥—Ä–µ –∂–∏–≤–µ—Ç –æ—Å–æ–±—ã–π –º–æ–º–µ–Ω—Ç, –ø–æ–π–º–∞–Ω–Ω—ã–π @{username} –∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –Ω–∞–º —á–µ—Ä–µ–∑ —ç–∫—Ä–∞–Ω.
    </p>
    
    <p>
        {photo_analysis}
    </p>
    
    <p>
        –ò—Å–∫—É—Å—Å—Ç–≤–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö, –Ω–æ –∏ –≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –æ–±—ã—á–Ω–∞—è —Å—Ü–µ–Ω–∞ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞. –ò–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–µ –º–≥–Ω–æ–≤–µ–Ω–∏—è –∏ –ª–æ–≤–∏—Ç –æ–±—ä–µ–∫—Ç–∏–≤ @{username}.
    </p>
</div>"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    html += f"""

<!-- –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ú–ò–† -->
<div class="page">
    <div class="chapter-number">–ì–ª–∞–≤–∞ –≤—Ç–æ—Ä–∞—è</div>
    <h2>–Ø–∑—ã–∫ —ç–º–æ—Ü–∏–π</h2>
    
    <p class="first-paragraph">
        <span class="drop-cap">–°</span>–ª–æ–≤–∞ –ø–æ–¥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—Å–∏. –≠—Ç–æ –∫–ª—é—á–∏ –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –º–∏—Ä—É –∞–≤—Ç–æ—Ä–∞, –µ–≥–æ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º –∏ –º—ã—Å–ª—è–º –≤ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–¥—Ä–∞.
    </p>
    
    <p>
        {content.get('emotions', f'–í –ø–æ–¥–ø–∏—Å—è—Ö @{username} –∂–∏–≤–µ—Ç –æ—Å–æ–±–∞—è –ø–æ—ç–∑–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏. –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤—ã–±—Ä–∞–Ω–æ —Å –∑–∞–±–æ—Ç–æ–π, –∫–∞–∂–¥–∞—è —Ñ—Ä–∞–∑–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ —á—É–≤—Å—Ç–≤–∞ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è.')}
    </p>
    
    <div class="captions-showcase">
        <h3>–ì–æ–ª–æ—Å –∞–≤—Ç–æ—Ä–∞</h3>
        {chr(10).join([f'<div class="caption-item">"{caption}"</div>' for caption in real_captions[:4]])}
    </div>
    
    <blockquote>
        "–í —ç–ø–æ—Ö—É –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ–≤–∞ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–Ω—ã–º–∏."
    </blockquote>
</div>

<!-- –ì–ï–û–ì–†–ê–§–ò–Ø –î–£–®–ò -->
<div class="page">
    <div class="chapter-number">–ì–ª–∞–≤–∞ —Ç—Ä–µ—Ç—å—è</div>
    <h2>–ö–∞—Ä—Ç–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π</h2>
    
    <p class="first-paragraph">
        <span class="drop-cap">–ú</span>–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –≤—ã–±–∏—Ä–∞–µ–º –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –º–Ω–æ–≥–æ–µ –≥–æ–≤–æ—Ä—è—Ç –æ –Ω–∞—à–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö, –º–µ—á—Ç–∞—Ö –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è—Ö. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è @{username} ‚Äî —ç—Ç–æ –∫–∞—Ä—Ç–∞ –¥—É—à–∏.
    </p>
    
    <p>
        {content.get('places', f'–ö–∞–∂–¥–æ–µ –º–µ—Å—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ–µ @{username} –∏–º–µ–µ—Ç —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é. –û—Ç {", ".join(locations[:3])} ‚Äî –∫–∞–∂–¥–∞—è –ª–æ–∫–∞—Ü–∏—è –æ—Å—Ç–∞–≤–∏–ª–∞ —Å–≤–æ–π —Å–ª–µ–¥ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ª–µ—Ç–æ–ø–∏—Å–∏.')}
    </p>
    
    <div style="margin: 2cm 0; padding: 1.5em; background: var(--soft-beige); border-radius: 12px;">
        <h3 style="margin-top: 0; color: var(--accent-warm);">–õ—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞:</h3>
        {chr(10).join([f'<p style="margin: 0.5em 0; text-indent: 0;"><em>{location}</em></p>' for location in locations[:5]])}
    </div>
    
    <blockquote>
        "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–µ —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞, –∞ —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É."
    </blockquote>
</div>

<!-- –°–û–û–ë–©–ï–°–¢–í–û -->
<div class="page">
    <div class="chapter-number">–ì–ª–∞–≤–∞ —á–µ—Ç–≤–µ—Ä—Ç–∞—è</div>
    <h2>–¶–∏—Ñ—Ä–æ–≤—ã–µ —Å–≤—è–∑–∏</h2>
    
    <p class="first-paragraph">
        <span class="drop-cap">–í</span> –º–∏—Ä–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –º—ã —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º—ã –±–ª–∏–∑–æ—Å—Ç–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è. –°–æ–æ–±—â–µ—Å—Ç–≤–æ –≤–æ–∫—Ä—É–≥ @{username} ‚Äî —ç—Ç–æ –æ—Å–æ–±–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ.
    </p>
    
    <p>
        {content.get('community', f'–í–æ–∫—Ä—É–≥ –ø—Ä–æ—Ñ–∏–ª—è @{username} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—é–±–æ–≤—å –∫ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º—É. {format_statistics_creatively("followers", followers)} ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä–∞, —ç—Ç–æ –∂–∏–≤—ã–µ –ª—é–¥–∏ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—Ä–∏—è–º–∏.')}
    </p>
    
    <blockquote>
        "–ù–∞—Å—Ç–æ—è—â–∏–µ —Å–≤—è–∑–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∞ –∫–∞—á–µ—Å—Ç–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."
    </blockquote>
</div>

<!-- –§–ò–ù–ê–õ -->
<div class="page">
    <div class="chapter-number">–≠–ø–∏–ª–æ–≥</div>
    <h2>–ß—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è</h2>
    
    <p class="first-paragraph">
        <span class="drop-cap">–í</span> —ç–ø–æ—Ö—É —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –º—ã —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º—ã –ø–∞–º—è—Ç–∏. –≠—Ç–∞ –∫–Ω–∏–≥–∞ ‚Äî –ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–≥–Ω–æ–≤–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –Ω–∞—à—É –∂–∏–∑–Ω—å –æ—Å–æ–±–µ–Ω–Ω–æ–π.
    </p>
    
    <p>
        {content.get('legacy', f'–ò—Å—Ç–æ—Ä–∏—è @{username} ‚Äî —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∫—Ä–∞—Å–æ—Ç–∞ –æ–∫—Ä—É–∂–∞–µ—Ç –Ω–∞—Å –ø–æ–≤—Å—é–¥—É. –ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞—É—á–∏—Ç—å—Å—è –µ—ë –∑–∞–º–µ—á–∞—Ç—å, —Ü–µ–Ω–∏—Ç—å –∏ –¥–µ–ª–∏—Ç—å—Å—è –µ—é —Å –¥—Ä—É–≥–∏–º–∏.')}
    </p>
    
    <div class="dedication" style="margin-top: 3cm;">
        <strong>–ö–æ–Ω–µ—Ü –ø–µ—Ä–≤–æ–π –≥–ª–∞–≤—ã.</strong><br>
        <em>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...</em>
    </div>
    
    <div style="position: absolute; bottom: 2cm; left: 50%; transform: translateX(-50%); text-align: center;">
        <p style="font-size: 10pt; color: var(--text-light); margin: 0;">
            –°–æ–∑–¥–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é ‚Ä¢ Instagram Story Book<br>
            <small>–ö–∞–∂–¥–∞—è –∏—Å—Ç–æ—Ä–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–∞</small>
        </p>
    </div>
</div>

</body>
</html>"""
    
    return html

def convert_image_to_base64(image_path: Path, max_size: tuple = (600, 400), style: str = "original") -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 —Å —á–∏—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª—è EPUB —Å—Ç–∏–ª—è"""
    try:
        if not image_path.exists():
            print(f"‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            return ""
            
        with Image.open(image_path) as img:
            print(f"üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path.name}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            img.thumbnail(max_size, Image.Resampling.LANCZOS)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–∏—Å—Ç—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è EPUB
            if style == "clean":
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                enhancer = ImageEnhance.Contrast(img)
                img = enhancer.enhance(1.05)  # –õ–µ–≥–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
                enhancer = ImageEnhance.Sharpness(img)
                img = enhancer.enhance(1.1)   # –ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
                enhancer = ImageEnhance.Color(img)
                img = enhancer.enhance(1.02)  # –û—á–µ–Ω—å –ª–µ–≥–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏
                
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            buffer = BytesIO()
            img.save(buffer, format='JPEG', quality=90, optimize=True)
            img_str = base64.b64encode(buffer.getvalue()).decode()
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è EPUB —Å—Ç–∏–ª—è")
            return f"data:image/jpeg;base64,{img_str}"
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
        return ""
